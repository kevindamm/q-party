// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kevindamm/q-party/ent/category"
	"github.com/kevindamm/q-party/ent/challenge"
	"github.com/kevindamm/q-party/ent/challengegroup"
	"github.com/kevindamm/q-party/ent/episode"
	"github.com/kevindamm/q-party/ent/episoderound"
	"github.com/kevindamm/q-party/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCategory       = "Category"
	TypeChallenge      = "Challenge"
	TypeChallengeGroup = "ChallengeGroup"
	TypeEpisode        = "Episode"
	TypeEpisodeRound   = "EpisodeRound"
)

// CategoryMutation represents an operation that mutates the Category nodes in the graph.
type CategoryMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	clearedFields     map[string]struct{}
	challenges        map[int]struct{}
	removedchallenges map[int]struct{}
	clearedchallenges bool
	done              bool
	oldValue          func(context.Context) (*Category, error)
	predicates        []predicate.Category
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows management of the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for the Category entity.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the ID field of the mutation.
func withCategoryID(id int) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Category.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryMutation) ResetName() {
	m.name = nil
}

// AddChallengeIDs adds the "challenges" edge to the ChallengeGroup entity by ids.
func (m *CategoryMutation) AddChallengeIDs(ids ...int) {
	if m.challenges == nil {
		m.challenges = make(map[int]struct{})
	}
	for i := range ids {
		m.challenges[ids[i]] = struct{}{}
	}
}

// ClearChallenges clears the "challenges" edge to the ChallengeGroup entity.
func (m *CategoryMutation) ClearChallenges() {
	m.clearedchallenges = true
}

// ChallengesCleared reports if the "challenges" edge to the ChallengeGroup entity was cleared.
func (m *CategoryMutation) ChallengesCleared() bool {
	return m.clearedchallenges
}

// RemoveChallengeIDs removes the "challenges" edge to the ChallengeGroup entity by IDs.
func (m *CategoryMutation) RemoveChallengeIDs(ids ...int) {
	if m.removedchallenges == nil {
		m.removedchallenges = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.challenges, ids[i])
		m.removedchallenges[ids[i]] = struct{}{}
	}
}

// RemovedChallenges returns the removed IDs of the "challenges" edge to the ChallengeGroup entity.
func (m *CategoryMutation) RemovedChallengesIDs() (ids []int) {
	for id := range m.removedchallenges {
		ids = append(ids, id)
	}
	return
}

// ChallengesIDs returns the "challenges" edge IDs in the mutation.
func (m *CategoryMutation) ChallengesIDs() (ids []int) {
	for id := range m.challenges {
		ids = append(ids, id)
	}
	return
}

// ResetChallenges resets all changes to the "challenges" edge.
func (m *CategoryMutation) ResetChallenges() {
	m.challenges = nil
	m.clearedchallenges = false
	m.removedchallenges = nil
}

// Where appends a list predicates to the CategoryMutation builder.
func (m *CategoryMutation) Where(ps ...predicate.Category) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Category, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, category.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.challenges != nil {
		edges = append(edges, category.EdgeChallenges)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeChallenges:
		ids := make([]ent.Value, 0, len(m.challenges))
		for id := range m.challenges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedchallenges != nil {
		edges = append(edges, category.EdgeChallenges)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeChallenges:
		ids := make([]ent.Value, 0, len(m.removedchallenges))
		for id := range m.removedchallenges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchallenges {
		edges = append(edges, category.EdgeChallenges)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case category.EdgeChallenges:
		return m.clearedchallenges
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgeChallenges:
		m.ResetChallenges()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// ChallengeMutation represents an operation that mutates the Challenge nodes in the graph.
type ChallengeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	media         *string
	prompt        *string
	response      *string
	value         *int
	addvalue      *int
	clearedFields map[string]struct{}
	column        map[int]struct{}
	removedcolumn map[int]struct{}
	clearedcolumn bool
	done          bool
	oldValue      func(context.Context) (*Challenge, error)
	predicates    []predicate.Challenge
}

var _ ent.Mutation = (*ChallengeMutation)(nil)

// challengeOption allows management of the mutation configuration using functional options.
type challengeOption func(*ChallengeMutation)

// newChallengeMutation creates new mutation for the Challenge entity.
func newChallengeMutation(c config, op Op, opts ...challengeOption) *ChallengeMutation {
	m := &ChallengeMutation{
		config:        c,
		op:            op,
		typ:           TypeChallenge,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChallengeID sets the ID field of the mutation.
func withChallengeID(id int) challengeOption {
	return func(m *ChallengeMutation) {
		var (
			err   error
			once  sync.Once
			value *Challenge
		)
		m.oldValue = func(ctx context.Context) (*Challenge, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Challenge.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChallenge sets the old Challenge of the mutation.
func withChallenge(node *Challenge) challengeOption {
	return func(m *ChallengeMutation) {
		m.oldValue = func(context.Context) (*Challenge, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChallengeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChallengeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChallengeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChallengeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Challenge.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMedia sets the "media" field.
func (m *ChallengeMutation) SetMedia(s string) {
	m.media = &s
}

// Media returns the value of the "media" field in the mutation.
func (m *ChallengeMutation) Media() (r string, exists bool) {
	v := m.media
	if v == nil {
		return
	}
	return *v, true
}

// OldMedia returns the old "media" field's value of the Challenge entity.
// If the Challenge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChallengeMutation) OldMedia(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMedia is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMedia requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedia: %w", err)
	}
	return oldValue.Media, nil
}

// ResetMedia resets all changes to the "media" field.
func (m *ChallengeMutation) ResetMedia() {
	m.media = nil
}

// SetPrompt sets the "prompt" field.
func (m *ChallengeMutation) SetPrompt(s string) {
	m.prompt = &s
}

// Prompt returns the value of the "prompt" field in the mutation.
func (m *ChallengeMutation) Prompt() (r string, exists bool) {
	v := m.prompt
	if v == nil {
		return
	}
	return *v, true
}

// OldPrompt returns the old "prompt" field's value of the Challenge entity.
// If the Challenge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChallengeMutation) OldPrompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrompt: %w", err)
	}
	return oldValue.Prompt, nil
}

// ResetPrompt resets all changes to the "prompt" field.
func (m *ChallengeMutation) ResetPrompt() {
	m.prompt = nil
}

// SetResponse sets the "response" field.
func (m *ChallengeMutation) SetResponse(s string) {
	m.response = &s
}

// Response returns the value of the "response" field in the mutation.
func (m *ChallengeMutation) Response() (r string, exists bool) {
	v := m.response
	if v == nil {
		return
	}
	return *v, true
}

// OldResponse returns the old "response" field's value of the Challenge entity.
// If the Challenge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChallengeMutation) OldResponse(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResponse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResponse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponse: %w", err)
	}
	return oldValue.Response, nil
}

// ResetResponse resets all changes to the "response" field.
func (m *ChallengeMutation) ResetResponse() {
	m.response = nil
}

// SetValue sets the "value" field.
func (m *ChallengeMutation) SetValue(i int) {
	m.value = &i
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *ChallengeMutation) Value() (r int, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Challenge entity.
// If the Challenge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChallengeMutation) OldValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds i to the "value" field.
func (m *ChallengeMutation) AddValue(i int) {
	if m.addvalue != nil {
		*m.addvalue += i
	} else {
		m.addvalue = &i
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *ChallengeMutation) AddedValue() (r int, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *ChallengeMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// AddColumnIDs adds the "column" edge to the ChallengeGroup entity by ids.
func (m *ChallengeMutation) AddColumnIDs(ids ...int) {
	if m.column == nil {
		m.column = make(map[int]struct{})
	}
	for i := range ids {
		m.column[ids[i]] = struct{}{}
	}
}

// ClearColumn clears the "column" edge to the ChallengeGroup entity.
func (m *ChallengeMutation) ClearColumn() {
	m.clearedcolumn = true
}

// ColumnCleared reports if the "column" edge to the ChallengeGroup entity was cleared.
func (m *ChallengeMutation) ColumnCleared() bool {
	return m.clearedcolumn
}

// RemoveColumnIDs removes the "column" edge to the ChallengeGroup entity by IDs.
func (m *ChallengeMutation) RemoveColumnIDs(ids ...int) {
	if m.removedcolumn == nil {
		m.removedcolumn = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.column, ids[i])
		m.removedcolumn[ids[i]] = struct{}{}
	}
}

// RemovedColumn returns the removed IDs of the "column" edge to the ChallengeGroup entity.
func (m *ChallengeMutation) RemovedColumnIDs() (ids []int) {
	for id := range m.removedcolumn {
		ids = append(ids, id)
	}
	return
}

// ColumnIDs returns the "column" edge IDs in the mutation.
func (m *ChallengeMutation) ColumnIDs() (ids []int) {
	for id := range m.column {
		ids = append(ids, id)
	}
	return
}

// ResetColumn resets all changes to the "column" edge.
func (m *ChallengeMutation) ResetColumn() {
	m.column = nil
	m.clearedcolumn = false
	m.removedcolumn = nil
}

// Where appends a list predicates to the ChallengeMutation builder.
func (m *ChallengeMutation) Where(ps ...predicate.Challenge) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChallengeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChallengeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Challenge, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChallengeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChallengeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Challenge).
func (m *ChallengeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChallengeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.media != nil {
		fields = append(fields, challenge.FieldMedia)
	}
	if m.prompt != nil {
		fields = append(fields, challenge.FieldPrompt)
	}
	if m.response != nil {
		fields = append(fields, challenge.FieldResponse)
	}
	if m.value != nil {
		fields = append(fields, challenge.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChallengeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case challenge.FieldMedia:
		return m.Media()
	case challenge.FieldPrompt:
		return m.Prompt()
	case challenge.FieldResponse:
		return m.Response()
	case challenge.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChallengeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case challenge.FieldMedia:
		return m.OldMedia(ctx)
	case challenge.FieldPrompt:
		return m.OldPrompt(ctx)
	case challenge.FieldResponse:
		return m.OldResponse(ctx)
	case challenge.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown Challenge field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChallengeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case challenge.FieldMedia:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedia(v)
		return nil
	case challenge.FieldPrompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrompt(v)
		return nil
	case challenge.FieldResponse:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponse(v)
		return nil
	case challenge.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Challenge field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChallengeMutation) AddedFields() []string {
	var fields []string
	if m.addvalue != nil {
		fields = append(fields, challenge.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChallengeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case challenge.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChallengeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case challenge.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown Challenge numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChallengeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChallengeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChallengeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Challenge nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChallengeMutation) ResetField(name string) error {
	switch name {
	case challenge.FieldMedia:
		m.ResetMedia()
		return nil
	case challenge.FieldPrompt:
		m.ResetPrompt()
		return nil
	case challenge.FieldResponse:
		m.ResetResponse()
		return nil
	case challenge.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Challenge field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChallengeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.column != nil {
		edges = append(edges, challenge.EdgeColumn)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChallengeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case challenge.EdgeColumn:
		ids := make([]ent.Value, 0, len(m.column))
		for id := range m.column {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChallengeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcolumn != nil {
		edges = append(edges, challenge.EdgeColumn)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChallengeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case challenge.EdgeColumn:
		ids := make([]ent.Value, 0, len(m.removedcolumn))
		for id := range m.removedcolumn {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChallengeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcolumn {
		edges = append(edges, challenge.EdgeColumn)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChallengeMutation) EdgeCleared(name string) bool {
	switch name {
	case challenge.EdgeColumn:
		return m.clearedcolumn
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChallengeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Challenge unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChallengeMutation) ResetEdge(name string) error {
	switch name {
	case challenge.EdgeColumn:
		m.ResetColumn()
		return nil
	}
	return fmt.Errorf("unknown Challenge edge %s", name)
}

// ChallengeGroupMutation represents an operation that mutates the ChallengeGroup nodes in the graph.
type ChallengeGroupMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	clearedFields        map[string]struct{}
	category             map[int]struct{}
	removedcategory      map[int]struct{}
	clearedcategory      bool
	challenges           map[int]struct{}
	removedchallenges    map[int]struct{}
	clearedchallenges    bool
	episode_round        map[int]struct{}
	removedepisode_round map[int]struct{}
	clearedepisode_round bool
	done                 bool
	oldValue             func(context.Context) (*ChallengeGroup, error)
	predicates           []predicate.ChallengeGroup
}

var _ ent.Mutation = (*ChallengeGroupMutation)(nil)

// challengegroupOption allows management of the mutation configuration using functional options.
type challengegroupOption func(*ChallengeGroupMutation)

// newChallengeGroupMutation creates new mutation for the ChallengeGroup entity.
func newChallengeGroupMutation(c config, op Op, opts ...challengegroupOption) *ChallengeGroupMutation {
	m := &ChallengeGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeChallengeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChallengeGroupID sets the ID field of the mutation.
func withChallengeGroupID(id int) challengegroupOption {
	return func(m *ChallengeGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *ChallengeGroup
		)
		m.oldValue = func(ctx context.Context) (*ChallengeGroup, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChallengeGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChallengeGroup sets the old ChallengeGroup of the mutation.
func withChallengeGroup(node *ChallengeGroup) challengegroupOption {
	return func(m *ChallengeGroupMutation) {
		m.oldValue = func(context.Context) (*ChallengeGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChallengeGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChallengeGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChallengeGroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChallengeGroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChallengeGroup.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// AddCategoryIDs adds the "category" edge to the Category entity by ids.
func (m *ChallengeGroupMutation) AddCategoryIDs(ids ...int) {
	if m.category == nil {
		m.category = make(map[int]struct{})
	}
	for i := range ids {
		m.category[ids[i]] = struct{}{}
	}
}

// ClearCategory clears the "category" edge to the Category entity.
func (m *ChallengeGroupMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the Category entity was cleared.
func (m *ChallengeGroupMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// RemoveCategoryIDs removes the "category" edge to the Category entity by IDs.
func (m *ChallengeGroupMutation) RemoveCategoryIDs(ids ...int) {
	if m.removedcategory == nil {
		m.removedcategory = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.category, ids[i])
		m.removedcategory[ids[i]] = struct{}{}
	}
}

// RemovedCategory returns the removed IDs of the "category" edge to the Category entity.
func (m *ChallengeGroupMutation) RemovedCategoryIDs() (ids []int) {
	for id := range m.removedcategory {
		ids = append(ids, id)
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
func (m *ChallengeGroupMutation) CategoryIDs() (ids []int) {
	for id := range m.category {
		ids = append(ids, id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *ChallengeGroupMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
	m.removedcategory = nil
}

// AddChallengeIDs adds the "challenges" edge to the Challenge entity by ids.
func (m *ChallengeGroupMutation) AddChallengeIDs(ids ...int) {
	if m.challenges == nil {
		m.challenges = make(map[int]struct{})
	}
	for i := range ids {
		m.challenges[ids[i]] = struct{}{}
	}
}

// ClearChallenges clears the "challenges" edge to the Challenge entity.
func (m *ChallengeGroupMutation) ClearChallenges() {
	m.clearedchallenges = true
}

// ChallengesCleared reports if the "challenges" edge to the Challenge entity was cleared.
func (m *ChallengeGroupMutation) ChallengesCleared() bool {
	return m.clearedchallenges
}

// RemoveChallengeIDs removes the "challenges" edge to the Challenge entity by IDs.
func (m *ChallengeGroupMutation) RemoveChallengeIDs(ids ...int) {
	if m.removedchallenges == nil {
		m.removedchallenges = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.challenges, ids[i])
		m.removedchallenges[ids[i]] = struct{}{}
	}
}

// RemovedChallenges returns the removed IDs of the "challenges" edge to the Challenge entity.
func (m *ChallengeGroupMutation) RemovedChallengesIDs() (ids []int) {
	for id := range m.removedchallenges {
		ids = append(ids, id)
	}
	return
}

// ChallengesIDs returns the "challenges" edge IDs in the mutation.
func (m *ChallengeGroupMutation) ChallengesIDs() (ids []int) {
	for id := range m.challenges {
		ids = append(ids, id)
	}
	return
}

// ResetChallenges resets all changes to the "challenges" edge.
func (m *ChallengeGroupMutation) ResetChallenges() {
	m.challenges = nil
	m.clearedchallenges = false
	m.removedchallenges = nil
}

// AddEpisodeRoundIDs adds the "episode_round" edge to the EpisodeRound entity by ids.
func (m *ChallengeGroupMutation) AddEpisodeRoundIDs(ids ...int) {
	if m.episode_round == nil {
		m.episode_round = make(map[int]struct{})
	}
	for i := range ids {
		m.episode_round[ids[i]] = struct{}{}
	}
}

// ClearEpisodeRound clears the "episode_round" edge to the EpisodeRound entity.
func (m *ChallengeGroupMutation) ClearEpisodeRound() {
	m.clearedepisode_round = true
}

// EpisodeRoundCleared reports if the "episode_round" edge to the EpisodeRound entity was cleared.
func (m *ChallengeGroupMutation) EpisodeRoundCleared() bool {
	return m.clearedepisode_round
}

// RemoveEpisodeRoundIDs removes the "episode_round" edge to the EpisodeRound entity by IDs.
func (m *ChallengeGroupMutation) RemoveEpisodeRoundIDs(ids ...int) {
	if m.removedepisode_round == nil {
		m.removedepisode_round = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.episode_round, ids[i])
		m.removedepisode_round[ids[i]] = struct{}{}
	}
}

// RemovedEpisodeRound returns the removed IDs of the "episode_round" edge to the EpisodeRound entity.
func (m *ChallengeGroupMutation) RemovedEpisodeRoundIDs() (ids []int) {
	for id := range m.removedepisode_round {
		ids = append(ids, id)
	}
	return
}

// EpisodeRoundIDs returns the "episode_round" edge IDs in the mutation.
func (m *ChallengeGroupMutation) EpisodeRoundIDs() (ids []int) {
	for id := range m.episode_round {
		ids = append(ids, id)
	}
	return
}

// ResetEpisodeRound resets all changes to the "episode_round" edge.
func (m *ChallengeGroupMutation) ResetEpisodeRound() {
	m.episode_round = nil
	m.clearedepisode_round = false
	m.removedepisode_round = nil
}

// Where appends a list predicates to the ChallengeGroupMutation builder.
func (m *ChallengeGroupMutation) Where(ps ...predicate.ChallengeGroup) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChallengeGroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChallengeGroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ChallengeGroup, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChallengeGroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChallengeGroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ChallengeGroup).
func (m *ChallengeGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChallengeGroupMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChallengeGroupMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChallengeGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown ChallengeGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChallengeGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChallengeGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChallengeGroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChallengeGroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChallengeGroupMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown ChallengeGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChallengeGroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChallengeGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChallengeGroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ChallengeGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChallengeGroupMutation) ResetField(name string) error {
	return fmt.Errorf("unknown ChallengeGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChallengeGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.category != nil {
		edges = append(edges, challengegroup.EdgeCategory)
	}
	if m.challenges != nil {
		edges = append(edges, challengegroup.EdgeChallenges)
	}
	if m.episode_round != nil {
		edges = append(edges, challengegroup.EdgeEpisodeRound)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChallengeGroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case challengegroup.EdgeCategory:
		ids := make([]ent.Value, 0, len(m.category))
		for id := range m.category {
			ids = append(ids, id)
		}
		return ids
	case challengegroup.EdgeChallenges:
		ids := make([]ent.Value, 0, len(m.challenges))
		for id := range m.challenges {
			ids = append(ids, id)
		}
		return ids
	case challengegroup.EdgeEpisodeRound:
		ids := make([]ent.Value, 0, len(m.episode_round))
		for id := range m.episode_round {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChallengeGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedcategory != nil {
		edges = append(edges, challengegroup.EdgeCategory)
	}
	if m.removedchallenges != nil {
		edges = append(edges, challengegroup.EdgeChallenges)
	}
	if m.removedepisode_round != nil {
		edges = append(edges, challengegroup.EdgeEpisodeRound)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChallengeGroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case challengegroup.EdgeCategory:
		ids := make([]ent.Value, 0, len(m.removedcategory))
		for id := range m.removedcategory {
			ids = append(ids, id)
		}
		return ids
	case challengegroup.EdgeChallenges:
		ids := make([]ent.Value, 0, len(m.removedchallenges))
		for id := range m.removedchallenges {
			ids = append(ids, id)
		}
		return ids
	case challengegroup.EdgeEpisodeRound:
		ids := make([]ent.Value, 0, len(m.removedepisode_round))
		for id := range m.removedepisode_round {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChallengeGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcategory {
		edges = append(edges, challengegroup.EdgeCategory)
	}
	if m.clearedchallenges {
		edges = append(edges, challengegroup.EdgeChallenges)
	}
	if m.clearedepisode_round {
		edges = append(edges, challengegroup.EdgeEpisodeRound)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChallengeGroupMutation) EdgeCleared(name string) bool {
	switch name {
	case challengegroup.EdgeCategory:
		return m.clearedcategory
	case challengegroup.EdgeChallenges:
		return m.clearedchallenges
	case challengegroup.EdgeEpisodeRound:
		return m.clearedepisode_round
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChallengeGroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ChallengeGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChallengeGroupMutation) ResetEdge(name string) error {
	switch name {
	case challengegroup.EdgeCategory:
		m.ResetCategory()
		return nil
	case challengegroup.EdgeChallenges:
		m.ResetChallenges()
		return nil
	case challengegroup.EdgeEpisodeRound:
		m.ResetEpisodeRound()
		return nil
	}
	return fmt.Errorf("unknown ChallengeGroup edge %s", name)
}

// EpisodeMutation represents an operation that mutates the Episode nodes in the graph.
type EpisodeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	aired         *time.Time
	difficulty    *episode.Difficulty
	clearedFields map[string]struct{}
	rounds        map[int]struct{}
	removedrounds map[int]struct{}
	clearedrounds bool
	done          bool
	oldValue      func(context.Context) (*Episode, error)
	predicates    []predicate.Episode
}

var _ ent.Mutation = (*EpisodeMutation)(nil)

// episodeOption allows management of the mutation configuration using functional options.
type episodeOption func(*EpisodeMutation)

// newEpisodeMutation creates new mutation for the Episode entity.
func newEpisodeMutation(c config, op Op, opts ...episodeOption) *EpisodeMutation {
	m := &EpisodeMutation{
		config:        c,
		op:            op,
		typ:           TypeEpisode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEpisodeID sets the ID field of the mutation.
func withEpisodeID(id int) episodeOption {
	return func(m *EpisodeMutation) {
		var (
			err   error
			once  sync.Once
			value *Episode
		)
		m.oldValue = func(ctx context.Context) (*Episode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Episode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEpisode sets the old Episode of the mutation.
func withEpisode(node *Episode) episodeOption {
	return func(m *EpisodeMutation) {
		m.oldValue = func(context.Context) (*Episode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EpisodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EpisodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EpisodeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EpisodeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Episode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAired sets the "aired" field.
func (m *EpisodeMutation) SetAired(t time.Time) {
	m.aired = &t
}

// Aired returns the value of the "aired" field in the mutation.
func (m *EpisodeMutation) Aired() (r time.Time, exists bool) {
	v := m.aired
	if v == nil {
		return
	}
	return *v, true
}

// OldAired returns the old "aired" field's value of the Episode entity.
// If the Episode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EpisodeMutation) OldAired(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAired is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAired requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAired: %w", err)
	}
	return oldValue.Aired, nil
}

// ResetAired resets all changes to the "aired" field.
func (m *EpisodeMutation) ResetAired() {
	m.aired = nil
}

// SetDifficulty sets the "difficulty" field.
func (m *EpisodeMutation) SetDifficulty(e episode.Difficulty) {
	m.difficulty = &e
}

// Difficulty returns the value of the "difficulty" field in the mutation.
func (m *EpisodeMutation) Difficulty() (r episode.Difficulty, exists bool) {
	v := m.difficulty
	if v == nil {
		return
	}
	return *v, true
}

// OldDifficulty returns the old "difficulty" field's value of the Episode entity.
// If the Episode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EpisodeMutation) OldDifficulty(ctx context.Context) (v episode.Difficulty, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDifficulty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDifficulty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDifficulty: %w", err)
	}
	return oldValue.Difficulty, nil
}

// ResetDifficulty resets all changes to the "difficulty" field.
func (m *EpisodeMutation) ResetDifficulty() {
	m.difficulty = nil
}

// AddRoundIDs adds the "rounds" edge to the EpisodeRound entity by ids.
func (m *EpisodeMutation) AddRoundIDs(ids ...int) {
	if m.rounds == nil {
		m.rounds = make(map[int]struct{})
	}
	for i := range ids {
		m.rounds[ids[i]] = struct{}{}
	}
}

// ClearRounds clears the "rounds" edge to the EpisodeRound entity.
func (m *EpisodeMutation) ClearRounds() {
	m.clearedrounds = true
}

// RoundsCleared reports if the "rounds" edge to the EpisodeRound entity was cleared.
func (m *EpisodeMutation) RoundsCleared() bool {
	return m.clearedrounds
}

// RemoveRoundIDs removes the "rounds" edge to the EpisodeRound entity by IDs.
func (m *EpisodeMutation) RemoveRoundIDs(ids ...int) {
	if m.removedrounds == nil {
		m.removedrounds = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rounds, ids[i])
		m.removedrounds[ids[i]] = struct{}{}
	}
}

// RemovedRounds returns the removed IDs of the "rounds" edge to the EpisodeRound entity.
func (m *EpisodeMutation) RemovedRoundsIDs() (ids []int) {
	for id := range m.removedrounds {
		ids = append(ids, id)
	}
	return
}

// RoundsIDs returns the "rounds" edge IDs in the mutation.
func (m *EpisodeMutation) RoundsIDs() (ids []int) {
	for id := range m.rounds {
		ids = append(ids, id)
	}
	return
}

// ResetRounds resets all changes to the "rounds" edge.
func (m *EpisodeMutation) ResetRounds() {
	m.rounds = nil
	m.clearedrounds = false
	m.removedrounds = nil
}

// Where appends a list predicates to the EpisodeMutation builder.
func (m *EpisodeMutation) Where(ps ...predicate.Episode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EpisodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EpisodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Episode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EpisodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EpisodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Episode).
func (m *EpisodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EpisodeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.aired != nil {
		fields = append(fields, episode.FieldAired)
	}
	if m.difficulty != nil {
		fields = append(fields, episode.FieldDifficulty)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EpisodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case episode.FieldAired:
		return m.Aired()
	case episode.FieldDifficulty:
		return m.Difficulty()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EpisodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case episode.FieldAired:
		return m.OldAired(ctx)
	case episode.FieldDifficulty:
		return m.OldDifficulty(ctx)
	}
	return nil, fmt.Errorf("unknown Episode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EpisodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case episode.FieldAired:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAired(v)
		return nil
	case episode.FieldDifficulty:
		v, ok := value.(episode.Difficulty)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDifficulty(v)
		return nil
	}
	return fmt.Errorf("unknown Episode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EpisodeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EpisodeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EpisodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Episode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EpisodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EpisodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EpisodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Episode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EpisodeMutation) ResetField(name string) error {
	switch name {
	case episode.FieldAired:
		m.ResetAired()
		return nil
	case episode.FieldDifficulty:
		m.ResetDifficulty()
		return nil
	}
	return fmt.Errorf("unknown Episode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EpisodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rounds != nil {
		edges = append(edges, episode.EdgeRounds)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EpisodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case episode.EdgeRounds:
		ids := make([]ent.Value, 0, len(m.rounds))
		for id := range m.rounds {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EpisodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrounds != nil {
		edges = append(edges, episode.EdgeRounds)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EpisodeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case episode.EdgeRounds:
		ids := make([]ent.Value, 0, len(m.removedrounds))
		for id := range m.removedrounds {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EpisodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrounds {
		edges = append(edges, episode.EdgeRounds)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EpisodeMutation) EdgeCleared(name string) bool {
	switch name {
	case episode.EdgeRounds:
		return m.clearedrounds
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EpisodeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Episode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EpisodeMutation) ResetEdge(name string) error {
	switch name {
	case episode.EdgeRounds:
		m.ResetRounds()
		return nil
	}
	return fmt.Errorf("unknown Episode edge %s", name)
}

// EpisodeRoundMutation represents an operation that mutates the EpisodeRound nodes in the graph.
type EpisodeRoundMutation struct {
	config
	op             Op
	typ            string
	id             *int
	round          *episoderound.Round
	clearedFields  map[string]struct{}
	columns        map[int]struct{}
	removedcolumns map[int]struct{}
	clearedcolumns bool
	episode        map[int]struct{}
	removedepisode map[int]struct{}
	clearedepisode bool
	done           bool
	oldValue       func(context.Context) (*EpisodeRound, error)
	predicates     []predicate.EpisodeRound
}

var _ ent.Mutation = (*EpisodeRoundMutation)(nil)

// episoderoundOption allows management of the mutation configuration using functional options.
type episoderoundOption func(*EpisodeRoundMutation)

// newEpisodeRoundMutation creates new mutation for the EpisodeRound entity.
func newEpisodeRoundMutation(c config, op Op, opts ...episoderoundOption) *EpisodeRoundMutation {
	m := &EpisodeRoundMutation{
		config:        c,
		op:            op,
		typ:           TypeEpisodeRound,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEpisodeRoundID sets the ID field of the mutation.
func withEpisodeRoundID(id int) episoderoundOption {
	return func(m *EpisodeRoundMutation) {
		var (
			err   error
			once  sync.Once
			value *EpisodeRound
		)
		m.oldValue = func(ctx context.Context) (*EpisodeRound, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EpisodeRound.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEpisodeRound sets the old EpisodeRound of the mutation.
func withEpisodeRound(node *EpisodeRound) episoderoundOption {
	return func(m *EpisodeRoundMutation) {
		m.oldValue = func(context.Context) (*EpisodeRound, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EpisodeRoundMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EpisodeRoundMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EpisodeRoundMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EpisodeRoundMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EpisodeRound.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRound sets the "round" field.
func (m *EpisodeRoundMutation) SetRound(e episoderound.Round) {
	m.round = &e
}

// Round returns the value of the "round" field in the mutation.
func (m *EpisodeRoundMutation) Round() (r episoderound.Round, exists bool) {
	v := m.round
	if v == nil {
		return
	}
	return *v, true
}

// OldRound returns the old "round" field's value of the EpisodeRound entity.
// If the EpisodeRound object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EpisodeRoundMutation) OldRound(ctx context.Context) (v episoderound.Round, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRound is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRound requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRound: %w", err)
	}
	return oldValue.Round, nil
}

// ResetRound resets all changes to the "round" field.
func (m *EpisodeRoundMutation) ResetRound() {
	m.round = nil
}

// AddColumnIDs adds the "columns" edge to the ChallengeGroup entity by ids.
func (m *EpisodeRoundMutation) AddColumnIDs(ids ...int) {
	if m.columns == nil {
		m.columns = make(map[int]struct{})
	}
	for i := range ids {
		m.columns[ids[i]] = struct{}{}
	}
}

// ClearColumns clears the "columns" edge to the ChallengeGroup entity.
func (m *EpisodeRoundMutation) ClearColumns() {
	m.clearedcolumns = true
}

// ColumnsCleared reports if the "columns" edge to the ChallengeGroup entity was cleared.
func (m *EpisodeRoundMutation) ColumnsCleared() bool {
	return m.clearedcolumns
}

// RemoveColumnIDs removes the "columns" edge to the ChallengeGroup entity by IDs.
func (m *EpisodeRoundMutation) RemoveColumnIDs(ids ...int) {
	if m.removedcolumns == nil {
		m.removedcolumns = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.columns, ids[i])
		m.removedcolumns[ids[i]] = struct{}{}
	}
}

// RemovedColumns returns the removed IDs of the "columns" edge to the ChallengeGroup entity.
func (m *EpisodeRoundMutation) RemovedColumnsIDs() (ids []int) {
	for id := range m.removedcolumns {
		ids = append(ids, id)
	}
	return
}

// ColumnsIDs returns the "columns" edge IDs in the mutation.
func (m *EpisodeRoundMutation) ColumnsIDs() (ids []int) {
	for id := range m.columns {
		ids = append(ids, id)
	}
	return
}

// ResetColumns resets all changes to the "columns" edge.
func (m *EpisodeRoundMutation) ResetColumns() {
	m.columns = nil
	m.clearedcolumns = false
	m.removedcolumns = nil
}

// AddEpisodeIDs adds the "episode" edge to the Episode entity by ids.
func (m *EpisodeRoundMutation) AddEpisodeIDs(ids ...int) {
	if m.episode == nil {
		m.episode = make(map[int]struct{})
	}
	for i := range ids {
		m.episode[ids[i]] = struct{}{}
	}
}

// ClearEpisode clears the "episode" edge to the Episode entity.
func (m *EpisodeRoundMutation) ClearEpisode() {
	m.clearedepisode = true
}

// EpisodeCleared reports if the "episode" edge to the Episode entity was cleared.
func (m *EpisodeRoundMutation) EpisodeCleared() bool {
	return m.clearedepisode
}

// RemoveEpisodeIDs removes the "episode" edge to the Episode entity by IDs.
func (m *EpisodeRoundMutation) RemoveEpisodeIDs(ids ...int) {
	if m.removedepisode == nil {
		m.removedepisode = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.episode, ids[i])
		m.removedepisode[ids[i]] = struct{}{}
	}
}

// RemovedEpisode returns the removed IDs of the "episode" edge to the Episode entity.
func (m *EpisodeRoundMutation) RemovedEpisodeIDs() (ids []int) {
	for id := range m.removedepisode {
		ids = append(ids, id)
	}
	return
}

// EpisodeIDs returns the "episode" edge IDs in the mutation.
func (m *EpisodeRoundMutation) EpisodeIDs() (ids []int) {
	for id := range m.episode {
		ids = append(ids, id)
	}
	return
}

// ResetEpisode resets all changes to the "episode" edge.
func (m *EpisodeRoundMutation) ResetEpisode() {
	m.episode = nil
	m.clearedepisode = false
	m.removedepisode = nil
}

// Where appends a list predicates to the EpisodeRoundMutation builder.
func (m *EpisodeRoundMutation) Where(ps ...predicate.EpisodeRound) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EpisodeRoundMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EpisodeRoundMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EpisodeRound, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EpisodeRoundMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EpisodeRoundMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EpisodeRound).
func (m *EpisodeRoundMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EpisodeRoundMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.round != nil {
		fields = append(fields, episoderound.FieldRound)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EpisodeRoundMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case episoderound.FieldRound:
		return m.Round()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EpisodeRoundMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case episoderound.FieldRound:
		return m.OldRound(ctx)
	}
	return nil, fmt.Errorf("unknown EpisodeRound field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EpisodeRoundMutation) SetField(name string, value ent.Value) error {
	switch name {
	case episoderound.FieldRound:
		v, ok := value.(episoderound.Round)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRound(v)
		return nil
	}
	return fmt.Errorf("unknown EpisodeRound field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EpisodeRoundMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EpisodeRoundMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EpisodeRoundMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EpisodeRound numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EpisodeRoundMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EpisodeRoundMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EpisodeRoundMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EpisodeRound nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EpisodeRoundMutation) ResetField(name string) error {
	switch name {
	case episoderound.FieldRound:
		m.ResetRound()
		return nil
	}
	return fmt.Errorf("unknown EpisodeRound field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EpisodeRoundMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.columns != nil {
		edges = append(edges, episoderound.EdgeColumns)
	}
	if m.episode != nil {
		edges = append(edges, episoderound.EdgeEpisode)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EpisodeRoundMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case episoderound.EdgeColumns:
		ids := make([]ent.Value, 0, len(m.columns))
		for id := range m.columns {
			ids = append(ids, id)
		}
		return ids
	case episoderound.EdgeEpisode:
		ids := make([]ent.Value, 0, len(m.episode))
		for id := range m.episode {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EpisodeRoundMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcolumns != nil {
		edges = append(edges, episoderound.EdgeColumns)
	}
	if m.removedepisode != nil {
		edges = append(edges, episoderound.EdgeEpisode)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EpisodeRoundMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case episoderound.EdgeColumns:
		ids := make([]ent.Value, 0, len(m.removedcolumns))
		for id := range m.removedcolumns {
			ids = append(ids, id)
		}
		return ids
	case episoderound.EdgeEpisode:
		ids := make([]ent.Value, 0, len(m.removedepisode))
		for id := range m.removedepisode {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EpisodeRoundMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcolumns {
		edges = append(edges, episoderound.EdgeColumns)
	}
	if m.clearedepisode {
		edges = append(edges, episoderound.EdgeEpisode)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EpisodeRoundMutation) EdgeCleared(name string) bool {
	switch name {
	case episoderound.EdgeColumns:
		return m.clearedcolumns
	case episoderound.EdgeEpisode:
		return m.clearedepisode
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EpisodeRoundMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown EpisodeRound unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EpisodeRoundMutation) ResetEdge(name string) error {
	switch name {
	case episoderound.EdgeColumns:
		m.ResetColumns()
		return nil
	case episoderound.EdgeEpisode:
		m.ResetEpisode()
		return nil
	}
	return fmt.Errorf("unknown EpisodeRound edge %s", name)
}
