// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevindamm/q-party/ent/challengegroup"
	"github.com/kevindamm/q-party/ent/episode"
	"github.com/kevindamm/q-party/ent/episoderound"
	"github.com/kevindamm/q-party/ent/predicate"
)

// EpisodeRoundQuery is the builder for querying EpisodeRound entities.
type EpisodeRoundQuery struct {
	config
	ctx         *QueryContext
	order       []episoderound.OrderOption
	inters      []Interceptor
	predicates  []predicate.EpisodeRound
	withColumns *ChallengeGroupQuery
	withEpisode *EpisodeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EpisodeRoundQuery builder.
func (erq *EpisodeRoundQuery) Where(ps ...predicate.EpisodeRound) *EpisodeRoundQuery {
	erq.predicates = append(erq.predicates, ps...)
	return erq
}

// Limit the number of records to be returned by this query.
func (erq *EpisodeRoundQuery) Limit(limit int) *EpisodeRoundQuery {
	erq.ctx.Limit = &limit
	return erq
}

// Offset to start from.
func (erq *EpisodeRoundQuery) Offset(offset int) *EpisodeRoundQuery {
	erq.ctx.Offset = &offset
	return erq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (erq *EpisodeRoundQuery) Unique(unique bool) *EpisodeRoundQuery {
	erq.ctx.Unique = &unique
	return erq
}

// Order specifies how the records should be ordered.
func (erq *EpisodeRoundQuery) Order(o ...episoderound.OrderOption) *EpisodeRoundQuery {
	erq.order = append(erq.order, o...)
	return erq
}

// QueryColumns chains the current query on the "columns" edge.
func (erq *EpisodeRoundQuery) QueryColumns() *ChallengeGroupQuery {
	query := (&ChallengeGroupClient{config: erq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := erq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := erq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(episoderound.Table, episoderound.FieldID, selector),
			sqlgraph.To(challengegroup.Table, challengegroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, episoderound.ColumnsTable, episoderound.ColumnsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(erq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEpisode chains the current query on the "episode" edge.
func (erq *EpisodeRoundQuery) QueryEpisode() *EpisodeQuery {
	query := (&EpisodeClient{config: erq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := erq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := erq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(episoderound.Table, episoderound.FieldID, selector),
			sqlgraph.To(episode.Table, episode.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, episoderound.EpisodeTable, episoderound.EpisodePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(erq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EpisodeRound entity from the query.
// Returns a *NotFoundError when no EpisodeRound was found.
func (erq *EpisodeRoundQuery) First(ctx context.Context) (*EpisodeRound, error) {
	nodes, err := erq.Limit(1).All(setContextOp(ctx, erq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{episoderound.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (erq *EpisodeRoundQuery) FirstX(ctx context.Context) *EpisodeRound {
	node, err := erq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EpisodeRound ID from the query.
// Returns a *NotFoundError when no EpisodeRound ID was found.
func (erq *EpisodeRoundQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = erq.Limit(1).IDs(setContextOp(ctx, erq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{episoderound.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (erq *EpisodeRoundQuery) FirstIDX(ctx context.Context) int {
	id, err := erq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EpisodeRound entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EpisodeRound entity is found.
// Returns a *NotFoundError when no EpisodeRound entities are found.
func (erq *EpisodeRoundQuery) Only(ctx context.Context) (*EpisodeRound, error) {
	nodes, err := erq.Limit(2).All(setContextOp(ctx, erq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{episoderound.Label}
	default:
		return nil, &NotSingularError{episoderound.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (erq *EpisodeRoundQuery) OnlyX(ctx context.Context) *EpisodeRound {
	node, err := erq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EpisodeRound ID in the query.
// Returns a *NotSingularError when more than one EpisodeRound ID is found.
// Returns a *NotFoundError when no entities are found.
func (erq *EpisodeRoundQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = erq.Limit(2).IDs(setContextOp(ctx, erq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{episoderound.Label}
	default:
		err = &NotSingularError{episoderound.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (erq *EpisodeRoundQuery) OnlyIDX(ctx context.Context) int {
	id, err := erq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EpisodeRounds.
func (erq *EpisodeRoundQuery) All(ctx context.Context) ([]*EpisodeRound, error) {
	ctx = setContextOp(ctx, erq.ctx, ent.OpQueryAll)
	if err := erq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EpisodeRound, *EpisodeRoundQuery]()
	return withInterceptors[[]*EpisodeRound](ctx, erq, qr, erq.inters)
}

// AllX is like All, but panics if an error occurs.
func (erq *EpisodeRoundQuery) AllX(ctx context.Context) []*EpisodeRound {
	nodes, err := erq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EpisodeRound IDs.
func (erq *EpisodeRoundQuery) IDs(ctx context.Context) (ids []int, err error) {
	if erq.ctx.Unique == nil && erq.path != nil {
		erq.Unique(true)
	}
	ctx = setContextOp(ctx, erq.ctx, ent.OpQueryIDs)
	if err = erq.Select(episoderound.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (erq *EpisodeRoundQuery) IDsX(ctx context.Context) []int {
	ids, err := erq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (erq *EpisodeRoundQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, erq.ctx, ent.OpQueryCount)
	if err := erq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, erq, querierCount[*EpisodeRoundQuery](), erq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (erq *EpisodeRoundQuery) CountX(ctx context.Context) int {
	count, err := erq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (erq *EpisodeRoundQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, erq.ctx, ent.OpQueryExist)
	switch _, err := erq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (erq *EpisodeRoundQuery) ExistX(ctx context.Context) bool {
	exist, err := erq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EpisodeRoundQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (erq *EpisodeRoundQuery) Clone() *EpisodeRoundQuery {
	if erq == nil {
		return nil
	}
	return &EpisodeRoundQuery{
		config:      erq.config,
		ctx:         erq.ctx.Clone(),
		order:       append([]episoderound.OrderOption{}, erq.order...),
		inters:      append([]Interceptor{}, erq.inters...),
		predicates:  append([]predicate.EpisodeRound{}, erq.predicates...),
		withColumns: erq.withColumns.Clone(),
		withEpisode: erq.withEpisode.Clone(),
		// clone intermediate query.
		sql:  erq.sql.Clone(),
		path: erq.path,
	}
}

// WithColumns tells the query-builder to eager-load the nodes that are connected to
// the "columns" edge. The optional arguments are used to configure the query builder of the edge.
func (erq *EpisodeRoundQuery) WithColumns(opts ...func(*ChallengeGroupQuery)) *EpisodeRoundQuery {
	query := (&ChallengeGroupClient{config: erq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	erq.withColumns = query
	return erq
}

// WithEpisode tells the query-builder to eager-load the nodes that are connected to
// the "episode" edge. The optional arguments are used to configure the query builder of the edge.
func (erq *EpisodeRoundQuery) WithEpisode(opts ...func(*EpisodeQuery)) *EpisodeRoundQuery {
	query := (&EpisodeClient{config: erq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	erq.withEpisode = query
	return erq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Round episoderound.Round `json:"round,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EpisodeRound.Query().
//		GroupBy(episoderound.FieldRound).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (erq *EpisodeRoundQuery) GroupBy(field string, fields ...string) *EpisodeRoundGroupBy {
	erq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EpisodeRoundGroupBy{build: erq}
	grbuild.flds = &erq.ctx.Fields
	grbuild.label = episoderound.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Round episoderound.Round `json:"round,omitempty"`
//	}
//
//	client.EpisodeRound.Query().
//		Select(episoderound.FieldRound).
//		Scan(ctx, &v)
func (erq *EpisodeRoundQuery) Select(fields ...string) *EpisodeRoundSelect {
	erq.ctx.Fields = append(erq.ctx.Fields, fields...)
	sbuild := &EpisodeRoundSelect{EpisodeRoundQuery: erq}
	sbuild.label = episoderound.Label
	sbuild.flds, sbuild.scan = &erq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EpisodeRoundSelect configured with the given aggregations.
func (erq *EpisodeRoundQuery) Aggregate(fns ...AggregateFunc) *EpisodeRoundSelect {
	return erq.Select().Aggregate(fns...)
}

func (erq *EpisodeRoundQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range erq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, erq); err != nil {
				return err
			}
		}
	}
	for _, f := range erq.ctx.Fields {
		if !episoderound.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if erq.path != nil {
		prev, err := erq.path(ctx)
		if err != nil {
			return err
		}
		erq.sql = prev
	}
	return nil
}

func (erq *EpisodeRoundQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EpisodeRound, error) {
	var (
		nodes       = []*EpisodeRound{}
		_spec       = erq.querySpec()
		loadedTypes = [2]bool{
			erq.withColumns != nil,
			erq.withEpisode != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EpisodeRound).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EpisodeRound{config: erq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, erq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := erq.withColumns; query != nil {
		if err := erq.loadColumns(ctx, query, nodes,
			func(n *EpisodeRound) { n.Edges.Columns = []*ChallengeGroup{} },
			func(n *EpisodeRound, e *ChallengeGroup) { n.Edges.Columns = append(n.Edges.Columns, e) }); err != nil {
			return nil, err
		}
	}
	if query := erq.withEpisode; query != nil {
		if err := erq.loadEpisode(ctx, query, nodes,
			func(n *EpisodeRound) { n.Edges.Episode = []*Episode{} },
			func(n *EpisodeRound, e *Episode) { n.Edges.Episode = append(n.Edges.Episode, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (erq *EpisodeRoundQuery) loadColumns(ctx context.Context, query *ChallengeGroupQuery, nodes []*EpisodeRound, init func(*EpisodeRound), assign func(*EpisodeRound, *ChallengeGroup)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*EpisodeRound)
	nids := make(map[int]map[*EpisodeRound]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(episoderound.ColumnsTable)
		s.Join(joinT).On(s.C(challengegroup.FieldID), joinT.C(episoderound.ColumnsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(episoderound.ColumnsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(episoderound.ColumnsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*EpisodeRound]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ChallengeGroup](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "columns" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (erq *EpisodeRoundQuery) loadEpisode(ctx context.Context, query *EpisodeQuery, nodes []*EpisodeRound, init func(*EpisodeRound), assign func(*EpisodeRound, *Episode)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*EpisodeRound)
	nids := make(map[int]map[*EpisodeRound]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(episoderound.EpisodeTable)
		s.Join(joinT).On(s.C(episode.FieldID), joinT.C(episoderound.EpisodePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(episoderound.EpisodePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(episoderound.EpisodePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*EpisodeRound]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Episode](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "episode" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (erq *EpisodeRoundQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := erq.querySpec()
	_spec.Node.Columns = erq.ctx.Fields
	if len(erq.ctx.Fields) > 0 {
		_spec.Unique = erq.ctx.Unique != nil && *erq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, erq.driver, _spec)
}

func (erq *EpisodeRoundQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(episoderound.Table, episoderound.Columns, sqlgraph.NewFieldSpec(episoderound.FieldID, field.TypeInt))
	_spec.From = erq.sql
	if unique := erq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if erq.path != nil {
		_spec.Unique = true
	}
	if fields := erq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, episoderound.FieldID)
		for i := range fields {
			if fields[i] != episoderound.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := erq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := erq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := erq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := erq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (erq *EpisodeRoundQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(erq.driver.Dialect())
	t1 := builder.Table(episoderound.Table)
	columns := erq.ctx.Fields
	if len(columns) == 0 {
		columns = episoderound.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if erq.sql != nil {
		selector = erq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if erq.ctx.Unique != nil && *erq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range erq.predicates {
		p(selector)
	}
	for _, p := range erq.order {
		p(selector)
	}
	if offset := erq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := erq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EpisodeRoundGroupBy is the group-by builder for EpisodeRound entities.
type EpisodeRoundGroupBy struct {
	selector
	build *EpisodeRoundQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ergb *EpisodeRoundGroupBy) Aggregate(fns ...AggregateFunc) *EpisodeRoundGroupBy {
	ergb.fns = append(ergb.fns, fns...)
	return ergb
}

// Scan applies the selector query and scans the result into the given value.
func (ergb *EpisodeRoundGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ergb.build.ctx, ent.OpQueryGroupBy)
	if err := ergb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EpisodeRoundQuery, *EpisodeRoundGroupBy](ctx, ergb.build, ergb, ergb.build.inters, v)
}

func (ergb *EpisodeRoundGroupBy) sqlScan(ctx context.Context, root *EpisodeRoundQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ergb.fns))
	for _, fn := range ergb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ergb.flds)+len(ergb.fns))
		for _, f := range *ergb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ergb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ergb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EpisodeRoundSelect is the builder for selecting fields of EpisodeRound entities.
type EpisodeRoundSelect struct {
	*EpisodeRoundQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ers *EpisodeRoundSelect) Aggregate(fns ...AggregateFunc) *EpisodeRoundSelect {
	ers.fns = append(ers.fns, fns...)
	return ers
}

// Scan applies the selector query and scans the result into the given value.
func (ers *EpisodeRoundSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ers.ctx, ent.OpQuerySelect)
	if err := ers.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EpisodeRoundQuery, *EpisodeRoundSelect](ctx, ers.EpisodeRoundQuery, ers, ers.inters, v)
}

func (ers *EpisodeRoundSelect) sqlScan(ctx context.Context, root *EpisodeRoundQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ers.fns))
	for _, fn := range ers.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ers.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ers.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
