// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kevindamm/q-party/ent/episoderound"
)

// EpisodeRound is the model entity for the EpisodeRound schema.
type EpisodeRound struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Round holds the value of the "round" field.
	Round episoderound.Round `json:"round,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EpisodeRoundQuery when eager-loading is set.
	Edges        EpisodeRoundEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EpisodeRoundEdges holds the relations/edges for other nodes in the graph.
type EpisodeRoundEdges struct {
	// Categories holds the value of the categories edge.
	Categories []*ChallengeGroup `json:"categories,omitempty"`
	// Episode holds the value of the episode edge.
	Episode []*Episode `json:"episode,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CategoriesOrErr returns the Categories value or an error if the edge
// was not loaded in eager-loading.
func (e EpisodeRoundEdges) CategoriesOrErr() ([]*ChallengeGroup, error) {
	if e.loadedTypes[0] {
		return e.Categories, nil
	}
	return nil, &NotLoadedError{edge: "categories"}
}

// EpisodeOrErr returns the Episode value or an error if the edge
// was not loaded in eager-loading.
func (e EpisodeRoundEdges) EpisodeOrErr() ([]*Episode, error) {
	if e.loadedTypes[1] {
		return e.Episode, nil
	}
	return nil, &NotLoadedError{edge: "episode"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EpisodeRound) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case episoderound.FieldID:
			values[i] = new(sql.NullInt64)
		case episoderound.FieldRound:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EpisodeRound fields.
func (er *EpisodeRound) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case episoderound.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			er.ID = int(value.Int64)
		case episoderound.FieldRound:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field round", values[i])
			} else if value.Valid {
				er.Round = episoderound.Round(value.String)
			}
		default:
			er.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EpisodeRound.
// This includes values selected through modifiers, order, etc.
func (er *EpisodeRound) Value(name string) (ent.Value, error) {
	return er.selectValues.Get(name)
}

// QueryCategories queries the "categories" edge of the EpisodeRound entity.
func (er *EpisodeRound) QueryCategories() *ChallengeGroupQuery {
	return NewEpisodeRoundClient(er.config).QueryCategories(er)
}

// QueryEpisode queries the "episode" edge of the EpisodeRound entity.
func (er *EpisodeRound) QueryEpisode() *EpisodeQuery {
	return NewEpisodeRoundClient(er.config).QueryEpisode(er)
}

// Update returns a builder for updating this EpisodeRound.
// Note that you need to call EpisodeRound.Unwrap() before calling this method if this EpisodeRound
// was returned from a transaction, and the transaction was committed or rolled back.
func (er *EpisodeRound) Update() *EpisodeRoundUpdateOne {
	return NewEpisodeRoundClient(er.config).UpdateOne(er)
}

// Unwrap unwraps the EpisodeRound entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (er *EpisodeRound) Unwrap() *EpisodeRound {
	_tx, ok := er.config.driver.(*txDriver)
	if !ok {
		panic("ent: EpisodeRound is not a transactional entity")
	}
	er.config.driver = _tx.drv
	return er
}

// String implements the fmt.Stringer.
func (er *EpisodeRound) String() string {
	var builder strings.Builder
	builder.WriteString("EpisodeRound(")
	builder.WriteString(fmt.Sprintf("id=%v, ", er.ID))
	builder.WriteString("round=")
	builder.WriteString(fmt.Sprintf("%v", er.Round))
	builder.WriteByte(')')
	return builder.String()
}

// EpisodeRounds is a parsable slice of EpisodeRound.
type EpisodeRounds []*EpisodeRound
