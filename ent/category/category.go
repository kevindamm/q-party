// Code generated by ent, DO NOT EDIT.

package category

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the category type in the database.
	Label = "category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeChallenges holds the string denoting the challenges edge name in mutations.
	EdgeChallenges = "challenges"
	// Table holds the table name of the category in the database.
	Table = "categories"
	// ChallengesTable is the table that holds the challenges relation/edge. The primary key declared below.
	ChallengesTable = "category_challenges"
	// ChallengesInverseTable is the table name for the ChallengeGroup entity.
	// It exists in this package in order to avoid circular dependency with the "challengegroup" package.
	ChallengesInverseTable = "challenge_groups"
)

// Columns holds all SQL columns for category fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// ChallengesPrimaryKey and ChallengesColumn2 are the table columns denoting the
	// primary key for the challenges relation (M2M).
	ChallengesPrimaryKey = []string{"category_id", "challenge_group_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Category queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByChallengesCount orders the results by challenges count.
func ByChallengesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChallengesStep(), opts...)
	}
}

// ByChallenges orders the results by challenges terms.
func ByChallenges(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChallengesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newChallengesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChallengesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ChallengesTable, ChallengesPrimaryKey...),
	)
}
