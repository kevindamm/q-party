// Code generated by ent, DO NOT EDIT.

package challenge

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kevindamm/q-party/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Challenge {
	return predicate.Challenge(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Challenge {
	return predicate.Challenge(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Challenge {
	return predicate.Challenge(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Challenge {
	return predicate.Challenge(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Challenge {
	return predicate.Challenge(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Challenge {
	return predicate.Challenge(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Challenge {
	return predicate.Challenge(sql.FieldLTE(FieldID, id))
}

// Media applies equality check predicate on the "media" field. It's identical to MediaEQ.
func Media(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldMedia, v))
}

// Prompt applies equality check predicate on the "prompt" field. It's identical to PromptEQ.
func Prompt(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldPrompt, v))
}

// Response applies equality check predicate on the "response" field. It's identical to ResponseEQ.
func Response(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldResponse, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v int) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldValue, v))
}

// MediaEQ applies the EQ predicate on the "media" field.
func MediaEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldMedia, v))
}

// MediaNEQ applies the NEQ predicate on the "media" field.
func MediaNEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNEQ(FieldMedia, v))
}

// MediaIn applies the In predicate on the "media" field.
func MediaIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldIn(FieldMedia, vs...))
}

// MediaNotIn applies the NotIn predicate on the "media" field.
func MediaNotIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNotIn(FieldMedia, vs...))
}

// MediaGT applies the GT predicate on the "media" field.
func MediaGT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGT(FieldMedia, v))
}

// MediaGTE applies the GTE predicate on the "media" field.
func MediaGTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGTE(FieldMedia, v))
}

// MediaLT applies the LT predicate on the "media" field.
func MediaLT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLT(FieldMedia, v))
}

// MediaLTE applies the LTE predicate on the "media" field.
func MediaLTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLTE(FieldMedia, v))
}

// MediaContains applies the Contains predicate on the "media" field.
func MediaContains(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContains(FieldMedia, v))
}

// MediaHasPrefix applies the HasPrefix predicate on the "media" field.
func MediaHasPrefix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasPrefix(FieldMedia, v))
}

// MediaHasSuffix applies the HasSuffix predicate on the "media" field.
func MediaHasSuffix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasSuffix(FieldMedia, v))
}

// MediaEqualFold applies the EqualFold predicate on the "media" field.
func MediaEqualFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEqualFold(FieldMedia, v))
}

// MediaContainsFold applies the ContainsFold predicate on the "media" field.
func MediaContainsFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContainsFold(FieldMedia, v))
}

// PromptEQ applies the EQ predicate on the "prompt" field.
func PromptEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldPrompt, v))
}

// PromptNEQ applies the NEQ predicate on the "prompt" field.
func PromptNEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNEQ(FieldPrompt, v))
}

// PromptIn applies the In predicate on the "prompt" field.
func PromptIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldIn(FieldPrompt, vs...))
}

// PromptNotIn applies the NotIn predicate on the "prompt" field.
func PromptNotIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNotIn(FieldPrompt, vs...))
}

// PromptGT applies the GT predicate on the "prompt" field.
func PromptGT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGT(FieldPrompt, v))
}

// PromptGTE applies the GTE predicate on the "prompt" field.
func PromptGTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGTE(FieldPrompt, v))
}

// PromptLT applies the LT predicate on the "prompt" field.
func PromptLT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLT(FieldPrompt, v))
}

// PromptLTE applies the LTE predicate on the "prompt" field.
func PromptLTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLTE(FieldPrompt, v))
}

// PromptContains applies the Contains predicate on the "prompt" field.
func PromptContains(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContains(FieldPrompt, v))
}

// PromptHasPrefix applies the HasPrefix predicate on the "prompt" field.
func PromptHasPrefix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasPrefix(FieldPrompt, v))
}

// PromptHasSuffix applies the HasSuffix predicate on the "prompt" field.
func PromptHasSuffix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasSuffix(FieldPrompt, v))
}

// PromptEqualFold applies the EqualFold predicate on the "prompt" field.
func PromptEqualFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEqualFold(FieldPrompt, v))
}

// PromptContainsFold applies the ContainsFold predicate on the "prompt" field.
func PromptContainsFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContainsFold(FieldPrompt, v))
}

// ResponseEQ applies the EQ predicate on the "response" field.
func ResponseEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldResponse, v))
}

// ResponseNEQ applies the NEQ predicate on the "response" field.
func ResponseNEQ(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNEQ(FieldResponse, v))
}

// ResponseIn applies the In predicate on the "response" field.
func ResponseIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldIn(FieldResponse, vs...))
}

// ResponseNotIn applies the NotIn predicate on the "response" field.
func ResponseNotIn(vs ...string) predicate.Challenge {
	return predicate.Challenge(sql.FieldNotIn(FieldResponse, vs...))
}

// ResponseGT applies the GT predicate on the "response" field.
func ResponseGT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGT(FieldResponse, v))
}

// ResponseGTE applies the GTE predicate on the "response" field.
func ResponseGTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldGTE(FieldResponse, v))
}

// ResponseLT applies the LT predicate on the "response" field.
func ResponseLT(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLT(FieldResponse, v))
}

// ResponseLTE applies the LTE predicate on the "response" field.
func ResponseLTE(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldLTE(FieldResponse, v))
}

// ResponseContains applies the Contains predicate on the "response" field.
func ResponseContains(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContains(FieldResponse, v))
}

// ResponseHasPrefix applies the HasPrefix predicate on the "response" field.
func ResponseHasPrefix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasPrefix(FieldResponse, v))
}

// ResponseHasSuffix applies the HasSuffix predicate on the "response" field.
func ResponseHasSuffix(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldHasSuffix(FieldResponse, v))
}

// ResponseEqualFold applies the EqualFold predicate on the "response" field.
func ResponseEqualFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldEqualFold(FieldResponse, v))
}

// ResponseContainsFold applies the ContainsFold predicate on the "response" field.
func ResponseContainsFold(v string) predicate.Challenge {
	return predicate.Challenge(sql.FieldContainsFold(FieldResponse, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v int) predicate.Challenge {
	return predicate.Challenge(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v int) predicate.Challenge {
	return predicate.Challenge(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...int) predicate.Challenge {
	return predicate.Challenge(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...int) predicate.Challenge {
	return predicate.Challenge(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v int) predicate.Challenge {
	return predicate.Challenge(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v int) predicate.Challenge {
	return predicate.Challenge(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v int) predicate.Challenge {
	return predicate.Challenge(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v int) predicate.Challenge {
	return predicate.Challenge(sql.FieldLTE(FieldValue, v))
}

// HasColumn applies the HasEdge predicate on the "column" edge.
func HasColumn() predicate.Challenge {
	return predicate.Challenge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ColumnTable, ColumnPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasColumnWith applies the HasEdge predicate on the "column" edge with a given conditions (other predicates).
func HasColumnWith(preds ...predicate.ChallengeGroup) predicate.Challenge {
	return predicate.Challenge(func(s *sql.Selector) {
		step := newColumnStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Challenge) predicate.Challenge {
	return predicate.Challenge(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Challenge) predicate.Challenge {
	return predicate.Challenge(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Challenge) predicate.Challenge {
	return predicate.Challenge(sql.NotPredicates(p))
}
