// Code generated by ent, DO NOT EDIT.

package challenge

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the challenge type in the database.
	Label = "challenge"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMedia holds the string denoting the media field in the database.
	FieldMedia = "media"
	// FieldPrompt holds the string denoting the prompt field in the database.
	FieldPrompt = "prompt"
	// FieldResponse holds the string denoting the response field in the database.
	FieldResponse = "response"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeChallengeGroup holds the string denoting the challenge_group edge name in mutations.
	EdgeChallengeGroup = "challenge_group"
	// Table holds the table name of the challenge in the database.
	Table = "challenges"
	// ChallengeGroupTable is the table that holds the challenge_group relation/edge. The primary key declared below.
	ChallengeGroupTable = "challenge_group_challenges"
	// ChallengeGroupInverseTable is the table name for the ChallengeGroup entity.
	// It exists in this package in order to avoid circular dependency with the "challengegroup" package.
	ChallengeGroupInverseTable = "challenge_groups"
)

// Columns holds all SQL columns for challenge fields.
var Columns = []string{
	FieldID,
	FieldMedia,
	FieldPrompt,
	FieldResponse,
	FieldValue,
}

var (
	// ChallengeGroupPrimaryKey and ChallengeGroupColumn2 are the table columns denoting the
	// primary key for the challenge_group relation (M2M).
	ChallengeGroupPrimaryKey = []string{"challenge_group_id", "challenge_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Challenge queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMedia orders the results by the media field.
func ByMedia(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedia, opts...).ToFunc()
}

// ByPrompt orders the results by the prompt field.
func ByPrompt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrompt, opts...).ToFunc()
}

// ByResponse orders the results by the response field.
func ByResponse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponse, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByChallengeGroupCount orders the results by challenge_group count.
func ByChallengeGroupCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChallengeGroupStep(), opts...)
	}
}

// ByChallengeGroup orders the results by challenge_group terms.
func ByChallengeGroup(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChallengeGroupStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newChallengeGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChallengeGroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ChallengeGroupTable, ChallengeGroupPrimaryKey...),
	)
}
