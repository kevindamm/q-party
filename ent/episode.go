// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kevindamm/q-party/ent/episode"
)

// Episode is the model entity for the Episode schema.
type Episode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Aired holds the value of the "aired" field.
	Aired time.Time `json:"aired,omitempty"`
	// Difficulty holds the value of the "difficulty" field.
	Difficulty episode.Difficulty `json:"difficulty,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EpisodeQuery when eager-loading is set.
	Edges        EpisodeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EpisodeEdges holds the relations/edges for other nodes in the graph.
type EpisodeEdges struct {
	// Rounds holds the value of the rounds edge.
	Rounds []*EpisodeRound `json:"rounds,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoundsOrErr returns the Rounds value or an error if the edge
// was not loaded in eager-loading.
func (e EpisodeEdges) RoundsOrErr() ([]*EpisodeRound, error) {
	if e.loadedTypes[0] {
		return e.Rounds, nil
	}
	return nil, &NotLoadedError{edge: "rounds"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Episode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case episode.FieldID:
			values[i] = new(sql.NullInt64)
		case episode.FieldDifficulty:
			values[i] = new(sql.NullString)
		case episode.FieldAired:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Episode fields.
func (e *Episode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case episode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case episode.FieldAired:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field aired", values[i])
			} else if value.Valid {
				e.Aired = value.Time
			}
		case episode.FieldDifficulty:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field difficulty", values[i])
			} else if value.Valid {
				e.Difficulty = episode.Difficulty(value.String)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Episode.
// This includes values selected through modifiers, order, etc.
func (e *Episode) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryRounds queries the "rounds" edge of the Episode entity.
func (e *Episode) QueryRounds() *EpisodeRoundQuery {
	return NewEpisodeClient(e.config).QueryRounds(e)
}

// Update returns a builder for updating this Episode.
// Note that you need to call Episode.Unwrap() before calling this method if this Episode
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Episode) Update() *EpisodeUpdateOne {
	return NewEpisodeClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Episode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Episode) Unwrap() *Episode {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Episode is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Episode) String() string {
	var builder strings.Builder
	builder.WriteString("Episode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("aired=")
	builder.WriteString(e.Aired.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("difficulty=")
	builder.WriteString(fmt.Sprintf("%v", e.Difficulty))
	builder.WriteByte(')')
	return builder.String()
}

// Episodes is a parsable slice of Episode.
type Episodes []*Episode
