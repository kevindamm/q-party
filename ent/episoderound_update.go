// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevindamm/q-party/ent/challengegroup"
	"github.com/kevindamm/q-party/ent/episode"
	"github.com/kevindamm/q-party/ent/episoderound"
	"github.com/kevindamm/q-party/ent/predicate"
)

// EpisodeRoundUpdate is the builder for updating EpisodeRound entities.
type EpisodeRoundUpdate struct {
	config
	hooks    []Hook
	mutation *EpisodeRoundMutation
}

// Where appends a list predicates to the EpisodeRoundUpdate builder.
func (eru *EpisodeRoundUpdate) Where(ps ...predicate.EpisodeRound) *EpisodeRoundUpdate {
	eru.mutation.Where(ps...)
	return eru
}

// SetRound sets the "round" field.
func (eru *EpisodeRoundUpdate) SetRound(e episoderound.Round) *EpisodeRoundUpdate {
	eru.mutation.SetRound(e)
	return eru
}

// SetNillableRound sets the "round" field if the given value is not nil.
func (eru *EpisodeRoundUpdate) SetNillableRound(e *episoderound.Round) *EpisodeRoundUpdate {
	if e != nil {
		eru.SetRound(*e)
	}
	return eru
}

// AddColumnIDs adds the "columns" edge to the ChallengeGroup entity by IDs.
func (eru *EpisodeRoundUpdate) AddColumnIDs(ids ...int) *EpisodeRoundUpdate {
	eru.mutation.AddColumnIDs(ids...)
	return eru
}

// AddColumns adds the "columns" edges to the ChallengeGroup entity.
func (eru *EpisodeRoundUpdate) AddColumns(c ...*ChallengeGroup) *EpisodeRoundUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eru.AddColumnIDs(ids...)
}

// AddEpisodeIDs adds the "episode" edge to the Episode entity by IDs.
func (eru *EpisodeRoundUpdate) AddEpisodeIDs(ids ...int) *EpisodeRoundUpdate {
	eru.mutation.AddEpisodeIDs(ids...)
	return eru
}

// AddEpisode adds the "episode" edges to the Episode entity.
func (eru *EpisodeRoundUpdate) AddEpisode(e ...*Episode) *EpisodeRoundUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eru.AddEpisodeIDs(ids...)
}

// Mutation returns the EpisodeRoundMutation object of the builder.
func (eru *EpisodeRoundUpdate) Mutation() *EpisodeRoundMutation {
	return eru.mutation
}

// ClearColumns clears all "columns" edges to the ChallengeGroup entity.
func (eru *EpisodeRoundUpdate) ClearColumns() *EpisodeRoundUpdate {
	eru.mutation.ClearColumns()
	return eru
}

// RemoveColumnIDs removes the "columns" edge to ChallengeGroup entities by IDs.
func (eru *EpisodeRoundUpdate) RemoveColumnIDs(ids ...int) *EpisodeRoundUpdate {
	eru.mutation.RemoveColumnIDs(ids...)
	return eru
}

// RemoveColumns removes "columns" edges to ChallengeGroup entities.
func (eru *EpisodeRoundUpdate) RemoveColumns(c ...*ChallengeGroup) *EpisodeRoundUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eru.RemoveColumnIDs(ids...)
}

// ClearEpisode clears all "episode" edges to the Episode entity.
func (eru *EpisodeRoundUpdate) ClearEpisode() *EpisodeRoundUpdate {
	eru.mutation.ClearEpisode()
	return eru
}

// RemoveEpisodeIDs removes the "episode" edge to Episode entities by IDs.
func (eru *EpisodeRoundUpdate) RemoveEpisodeIDs(ids ...int) *EpisodeRoundUpdate {
	eru.mutation.RemoveEpisodeIDs(ids...)
	return eru
}

// RemoveEpisode removes "episode" edges to Episode entities.
func (eru *EpisodeRoundUpdate) RemoveEpisode(e ...*Episode) *EpisodeRoundUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eru.RemoveEpisodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eru *EpisodeRoundUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eru.sqlSave, eru.mutation, eru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eru *EpisodeRoundUpdate) SaveX(ctx context.Context) int {
	affected, err := eru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eru *EpisodeRoundUpdate) Exec(ctx context.Context) error {
	_, err := eru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eru *EpisodeRoundUpdate) ExecX(ctx context.Context) {
	if err := eru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eru *EpisodeRoundUpdate) check() error {
	if v, ok := eru.mutation.Round(); ok {
		if err := episoderound.RoundValidator(v); err != nil {
			return &ValidationError{Name: "round", err: fmt.Errorf(`ent: validator failed for field "EpisodeRound.round": %w`, err)}
		}
	}
	return nil
}

func (eru *EpisodeRoundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(episoderound.Table, episoderound.Columns, sqlgraph.NewFieldSpec(episoderound.FieldID, field.TypeInt))
	if ps := eru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eru.mutation.Round(); ok {
		_spec.SetField(episoderound.FieldRound, field.TypeEnum, value)
	}
	if eru.mutation.ColumnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   episoderound.ColumnsTable,
			Columns: episoderound.ColumnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challengegroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eru.mutation.RemovedColumnsIDs(); len(nodes) > 0 && !eru.mutation.ColumnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   episoderound.ColumnsTable,
			Columns: episoderound.ColumnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challengegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eru.mutation.ColumnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   episoderound.ColumnsTable,
			Columns: episoderound.ColumnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challengegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eru.mutation.EpisodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   episoderound.EpisodeTable,
			Columns: episoderound.EpisodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eru.mutation.RemovedEpisodeIDs(); len(nodes) > 0 && !eru.mutation.EpisodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   episoderound.EpisodeTable,
			Columns: episoderound.EpisodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eru.mutation.EpisodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   episoderound.EpisodeTable,
			Columns: episoderound.EpisodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{episoderound.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eru.mutation.done = true
	return n, nil
}

// EpisodeRoundUpdateOne is the builder for updating a single EpisodeRound entity.
type EpisodeRoundUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EpisodeRoundMutation
}

// SetRound sets the "round" field.
func (eruo *EpisodeRoundUpdateOne) SetRound(e episoderound.Round) *EpisodeRoundUpdateOne {
	eruo.mutation.SetRound(e)
	return eruo
}

// SetNillableRound sets the "round" field if the given value is not nil.
func (eruo *EpisodeRoundUpdateOne) SetNillableRound(e *episoderound.Round) *EpisodeRoundUpdateOne {
	if e != nil {
		eruo.SetRound(*e)
	}
	return eruo
}

// AddColumnIDs adds the "columns" edge to the ChallengeGroup entity by IDs.
func (eruo *EpisodeRoundUpdateOne) AddColumnIDs(ids ...int) *EpisodeRoundUpdateOne {
	eruo.mutation.AddColumnIDs(ids...)
	return eruo
}

// AddColumns adds the "columns" edges to the ChallengeGroup entity.
func (eruo *EpisodeRoundUpdateOne) AddColumns(c ...*ChallengeGroup) *EpisodeRoundUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eruo.AddColumnIDs(ids...)
}

// AddEpisodeIDs adds the "episode" edge to the Episode entity by IDs.
func (eruo *EpisodeRoundUpdateOne) AddEpisodeIDs(ids ...int) *EpisodeRoundUpdateOne {
	eruo.mutation.AddEpisodeIDs(ids...)
	return eruo
}

// AddEpisode adds the "episode" edges to the Episode entity.
func (eruo *EpisodeRoundUpdateOne) AddEpisode(e ...*Episode) *EpisodeRoundUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eruo.AddEpisodeIDs(ids...)
}

// Mutation returns the EpisodeRoundMutation object of the builder.
func (eruo *EpisodeRoundUpdateOne) Mutation() *EpisodeRoundMutation {
	return eruo.mutation
}

// ClearColumns clears all "columns" edges to the ChallengeGroup entity.
func (eruo *EpisodeRoundUpdateOne) ClearColumns() *EpisodeRoundUpdateOne {
	eruo.mutation.ClearColumns()
	return eruo
}

// RemoveColumnIDs removes the "columns" edge to ChallengeGroup entities by IDs.
func (eruo *EpisodeRoundUpdateOne) RemoveColumnIDs(ids ...int) *EpisodeRoundUpdateOne {
	eruo.mutation.RemoveColumnIDs(ids...)
	return eruo
}

// RemoveColumns removes "columns" edges to ChallengeGroup entities.
func (eruo *EpisodeRoundUpdateOne) RemoveColumns(c ...*ChallengeGroup) *EpisodeRoundUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eruo.RemoveColumnIDs(ids...)
}

// ClearEpisode clears all "episode" edges to the Episode entity.
func (eruo *EpisodeRoundUpdateOne) ClearEpisode() *EpisodeRoundUpdateOne {
	eruo.mutation.ClearEpisode()
	return eruo
}

// RemoveEpisodeIDs removes the "episode" edge to Episode entities by IDs.
func (eruo *EpisodeRoundUpdateOne) RemoveEpisodeIDs(ids ...int) *EpisodeRoundUpdateOne {
	eruo.mutation.RemoveEpisodeIDs(ids...)
	return eruo
}

// RemoveEpisode removes "episode" edges to Episode entities.
func (eruo *EpisodeRoundUpdateOne) RemoveEpisode(e ...*Episode) *EpisodeRoundUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eruo.RemoveEpisodeIDs(ids...)
}

// Where appends a list predicates to the EpisodeRoundUpdate builder.
func (eruo *EpisodeRoundUpdateOne) Where(ps ...predicate.EpisodeRound) *EpisodeRoundUpdateOne {
	eruo.mutation.Where(ps...)
	return eruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eruo *EpisodeRoundUpdateOne) Select(field string, fields ...string) *EpisodeRoundUpdateOne {
	eruo.fields = append([]string{field}, fields...)
	return eruo
}

// Save executes the query and returns the updated EpisodeRound entity.
func (eruo *EpisodeRoundUpdateOne) Save(ctx context.Context) (*EpisodeRound, error) {
	return withHooks(ctx, eruo.sqlSave, eruo.mutation, eruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eruo *EpisodeRoundUpdateOne) SaveX(ctx context.Context) *EpisodeRound {
	node, err := eruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eruo *EpisodeRoundUpdateOne) Exec(ctx context.Context) error {
	_, err := eruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eruo *EpisodeRoundUpdateOne) ExecX(ctx context.Context) {
	if err := eruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eruo *EpisodeRoundUpdateOne) check() error {
	if v, ok := eruo.mutation.Round(); ok {
		if err := episoderound.RoundValidator(v); err != nil {
			return &ValidationError{Name: "round", err: fmt.Errorf(`ent: validator failed for field "EpisodeRound.round": %w`, err)}
		}
	}
	return nil
}

func (eruo *EpisodeRoundUpdateOne) sqlSave(ctx context.Context) (_node *EpisodeRound, err error) {
	if err := eruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(episoderound.Table, episoderound.Columns, sqlgraph.NewFieldSpec(episoderound.FieldID, field.TypeInt))
	id, ok := eruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EpisodeRound.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, episoderound.FieldID)
		for _, f := range fields {
			if !episoderound.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != episoderound.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eruo.mutation.Round(); ok {
		_spec.SetField(episoderound.FieldRound, field.TypeEnum, value)
	}
	if eruo.mutation.ColumnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   episoderound.ColumnsTable,
			Columns: episoderound.ColumnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challengegroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eruo.mutation.RemovedColumnsIDs(); len(nodes) > 0 && !eruo.mutation.ColumnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   episoderound.ColumnsTable,
			Columns: episoderound.ColumnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challengegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eruo.mutation.ColumnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   episoderound.ColumnsTable,
			Columns: episoderound.ColumnsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challengegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eruo.mutation.EpisodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   episoderound.EpisodeTable,
			Columns: episoderound.EpisodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eruo.mutation.RemovedEpisodeIDs(); len(nodes) > 0 && !eruo.mutation.EpisodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   episoderound.EpisodeTable,
			Columns: episoderound.EpisodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eruo.mutation.EpisodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   episoderound.EpisodeTable,
			Columns: episoderound.EpisodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EpisodeRound{config: eruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{episoderound.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eruo.mutation.done = true
	return _node, nil
}
