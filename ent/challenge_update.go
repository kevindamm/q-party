// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevindamm/q-party/ent/challenge"
	"github.com/kevindamm/q-party/ent/challengegroup"
	"github.com/kevindamm/q-party/ent/predicate"
)

// ChallengeUpdate is the builder for updating Challenge entities.
type ChallengeUpdate struct {
	config
	hooks    []Hook
	mutation *ChallengeMutation
}

// Where appends a list predicates to the ChallengeUpdate builder.
func (cu *ChallengeUpdate) Where(ps ...predicate.Challenge) *ChallengeUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetMedia sets the "media" field.
func (cu *ChallengeUpdate) SetMedia(s string) *ChallengeUpdate {
	cu.mutation.SetMedia(s)
	return cu
}

// SetNillableMedia sets the "media" field if the given value is not nil.
func (cu *ChallengeUpdate) SetNillableMedia(s *string) *ChallengeUpdate {
	if s != nil {
		cu.SetMedia(*s)
	}
	return cu
}

// SetPrompt sets the "prompt" field.
func (cu *ChallengeUpdate) SetPrompt(s string) *ChallengeUpdate {
	cu.mutation.SetPrompt(s)
	return cu
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (cu *ChallengeUpdate) SetNillablePrompt(s *string) *ChallengeUpdate {
	if s != nil {
		cu.SetPrompt(*s)
	}
	return cu
}

// SetResponse sets the "response" field.
func (cu *ChallengeUpdate) SetResponse(s string) *ChallengeUpdate {
	cu.mutation.SetResponse(s)
	return cu
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (cu *ChallengeUpdate) SetNillableResponse(s *string) *ChallengeUpdate {
	if s != nil {
		cu.SetResponse(*s)
	}
	return cu
}

// SetValue sets the "value" field.
func (cu *ChallengeUpdate) SetValue(i int) *ChallengeUpdate {
	cu.mutation.ResetValue()
	cu.mutation.SetValue(i)
	return cu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (cu *ChallengeUpdate) SetNillableValue(i *int) *ChallengeUpdate {
	if i != nil {
		cu.SetValue(*i)
	}
	return cu
}

// AddValue adds i to the "value" field.
func (cu *ChallengeUpdate) AddValue(i int) *ChallengeUpdate {
	cu.mutation.AddValue(i)
	return cu
}

// AddColumnIDs adds the "column" edge to the ChallengeGroup entity by IDs.
func (cu *ChallengeUpdate) AddColumnIDs(ids ...int) *ChallengeUpdate {
	cu.mutation.AddColumnIDs(ids...)
	return cu
}

// AddColumn adds the "column" edges to the ChallengeGroup entity.
func (cu *ChallengeUpdate) AddColumn(c ...*ChallengeGroup) *ChallengeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddColumnIDs(ids...)
}

// Mutation returns the ChallengeMutation object of the builder.
func (cu *ChallengeUpdate) Mutation() *ChallengeMutation {
	return cu.mutation
}

// ClearColumn clears all "column" edges to the ChallengeGroup entity.
func (cu *ChallengeUpdate) ClearColumn() *ChallengeUpdate {
	cu.mutation.ClearColumn()
	return cu
}

// RemoveColumnIDs removes the "column" edge to ChallengeGroup entities by IDs.
func (cu *ChallengeUpdate) RemoveColumnIDs(ids ...int) *ChallengeUpdate {
	cu.mutation.RemoveColumnIDs(ids...)
	return cu
}

// RemoveColumn removes "column" edges to ChallengeGroup entities.
func (cu *ChallengeUpdate) RemoveColumn(c ...*ChallengeGroup) *ChallengeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveColumnIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChallengeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChallengeUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChallengeUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChallengeUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ChallengeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(challenge.Table, challenge.Columns, sqlgraph.NewFieldSpec(challenge.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Media(); ok {
		_spec.SetField(challenge.FieldMedia, field.TypeString, value)
	}
	if value, ok := cu.mutation.Prompt(); ok {
		_spec.SetField(challenge.FieldPrompt, field.TypeString, value)
	}
	if value, ok := cu.mutation.Response(); ok {
		_spec.SetField(challenge.FieldResponse, field.TypeString, value)
	}
	if value, ok := cu.mutation.Value(); ok {
		_spec.SetField(challenge.FieldValue, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedValue(); ok {
		_spec.AddField(challenge.FieldValue, field.TypeInt, value)
	}
	if cu.mutation.ColumnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   challenge.ColumnTable,
			Columns: challenge.ColumnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challengegroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedColumnIDs(); len(nodes) > 0 && !cu.mutation.ColumnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   challenge.ColumnTable,
			Columns: challenge.ColumnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challengegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ColumnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   challenge.ColumnTable,
			Columns: challenge.ColumnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challengegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{challenge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChallengeUpdateOne is the builder for updating a single Challenge entity.
type ChallengeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChallengeMutation
}

// SetMedia sets the "media" field.
func (cuo *ChallengeUpdateOne) SetMedia(s string) *ChallengeUpdateOne {
	cuo.mutation.SetMedia(s)
	return cuo
}

// SetNillableMedia sets the "media" field if the given value is not nil.
func (cuo *ChallengeUpdateOne) SetNillableMedia(s *string) *ChallengeUpdateOne {
	if s != nil {
		cuo.SetMedia(*s)
	}
	return cuo
}

// SetPrompt sets the "prompt" field.
func (cuo *ChallengeUpdateOne) SetPrompt(s string) *ChallengeUpdateOne {
	cuo.mutation.SetPrompt(s)
	return cuo
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (cuo *ChallengeUpdateOne) SetNillablePrompt(s *string) *ChallengeUpdateOne {
	if s != nil {
		cuo.SetPrompt(*s)
	}
	return cuo
}

// SetResponse sets the "response" field.
func (cuo *ChallengeUpdateOne) SetResponse(s string) *ChallengeUpdateOne {
	cuo.mutation.SetResponse(s)
	return cuo
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (cuo *ChallengeUpdateOne) SetNillableResponse(s *string) *ChallengeUpdateOne {
	if s != nil {
		cuo.SetResponse(*s)
	}
	return cuo
}

// SetValue sets the "value" field.
func (cuo *ChallengeUpdateOne) SetValue(i int) *ChallengeUpdateOne {
	cuo.mutation.ResetValue()
	cuo.mutation.SetValue(i)
	return cuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (cuo *ChallengeUpdateOne) SetNillableValue(i *int) *ChallengeUpdateOne {
	if i != nil {
		cuo.SetValue(*i)
	}
	return cuo
}

// AddValue adds i to the "value" field.
func (cuo *ChallengeUpdateOne) AddValue(i int) *ChallengeUpdateOne {
	cuo.mutation.AddValue(i)
	return cuo
}

// AddColumnIDs adds the "column" edge to the ChallengeGroup entity by IDs.
func (cuo *ChallengeUpdateOne) AddColumnIDs(ids ...int) *ChallengeUpdateOne {
	cuo.mutation.AddColumnIDs(ids...)
	return cuo
}

// AddColumn adds the "column" edges to the ChallengeGroup entity.
func (cuo *ChallengeUpdateOne) AddColumn(c ...*ChallengeGroup) *ChallengeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddColumnIDs(ids...)
}

// Mutation returns the ChallengeMutation object of the builder.
func (cuo *ChallengeUpdateOne) Mutation() *ChallengeMutation {
	return cuo.mutation
}

// ClearColumn clears all "column" edges to the ChallengeGroup entity.
func (cuo *ChallengeUpdateOne) ClearColumn() *ChallengeUpdateOne {
	cuo.mutation.ClearColumn()
	return cuo
}

// RemoveColumnIDs removes the "column" edge to ChallengeGroup entities by IDs.
func (cuo *ChallengeUpdateOne) RemoveColumnIDs(ids ...int) *ChallengeUpdateOne {
	cuo.mutation.RemoveColumnIDs(ids...)
	return cuo
}

// RemoveColumn removes "column" edges to ChallengeGroup entities.
func (cuo *ChallengeUpdateOne) RemoveColumn(c ...*ChallengeGroup) *ChallengeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveColumnIDs(ids...)
}

// Where appends a list predicates to the ChallengeUpdate builder.
func (cuo *ChallengeUpdateOne) Where(ps ...predicate.Challenge) *ChallengeUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChallengeUpdateOne) Select(field string, fields ...string) *ChallengeUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Challenge entity.
func (cuo *ChallengeUpdateOne) Save(ctx context.Context) (*Challenge, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChallengeUpdateOne) SaveX(ctx context.Context) *Challenge {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChallengeUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChallengeUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ChallengeUpdateOne) sqlSave(ctx context.Context) (_node *Challenge, err error) {
	_spec := sqlgraph.NewUpdateSpec(challenge.Table, challenge.Columns, sqlgraph.NewFieldSpec(challenge.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Challenge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, challenge.FieldID)
		for _, f := range fields {
			if !challenge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != challenge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Media(); ok {
		_spec.SetField(challenge.FieldMedia, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Prompt(); ok {
		_spec.SetField(challenge.FieldPrompt, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Response(); ok {
		_spec.SetField(challenge.FieldResponse, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Value(); ok {
		_spec.SetField(challenge.FieldValue, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedValue(); ok {
		_spec.AddField(challenge.FieldValue, field.TypeInt, value)
	}
	if cuo.mutation.ColumnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   challenge.ColumnTable,
			Columns: challenge.ColumnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challengegroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedColumnIDs(); len(nodes) > 0 && !cuo.mutation.ColumnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   challenge.ColumnTable,
			Columns: challenge.ColumnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challengegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ColumnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   challenge.ColumnTable,
			Columns: challenge.ColumnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challengegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Challenge{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{challenge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
