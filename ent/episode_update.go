// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevindamm/q-party/ent/episode"
	"github.com/kevindamm/q-party/ent/episoderound"
	"github.com/kevindamm/q-party/ent/predicate"
)

// EpisodeUpdate is the builder for updating Episode entities.
type EpisodeUpdate struct {
	config
	hooks    []Hook
	mutation *EpisodeMutation
}

// Where appends a list predicates to the EpisodeUpdate builder.
func (eu *EpisodeUpdate) Where(ps ...predicate.Episode) *EpisodeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetAired sets the "aired" field.
func (eu *EpisodeUpdate) SetAired(t time.Time) *EpisodeUpdate {
	eu.mutation.SetAired(t)
	return eu
}

// SetNillableAired sets the "aired" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableAired(t *time.Time) *EpisodeUpdate {
	if t != nil {
		eu.SetAired(*t)
	}
	return eu
}

// SetDifficulty sets the "difficulty" field.
func (eu *EpisodeUpdate) SetDifficulty(e episode.Difficulty) *EpisodeUpdate {
	eu.mutation.SetDifficulty(e)
	return eu
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableDifficulty(e *episode.Difficulty) *EpisodeUpdate {
	if e != nil {
		eu.SetDifficulty(*e)
	}
	return eu
}

// AddRoundIDs adds the "rounds" edge to the EpisodeRound entity by IDs.
func (eu *EpisodeUpdate) AddRoundIDs(ids ...int) *EpisodeUpdate {
	eu.mutation.AddRoundIDs(ids...)
	return eu
}

// AddRounds adds the "rounds" edges to the EpisodeRound entity.
func (eu *EpisodeUpdate) AddRounds(e ...*EpisodeRound) *EpisodeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddRoundIDs(ids...)
}

// Mutation returns the EpisodeMutation object of the builder.
func (eu *EpisodeUpdate) Mutation() *EpisodeMutation {
	return eu.mutation
}

// ClearRounds clears all "rounds" edges to the EpisodeRound entity.
func (eu *EpisodeUpdate) ClearRounds() *EpisodeUpdate {
	eu.mutation.ClearRounds()
	return eu
}

// RemoveRoundIDs removes the "rounds" edge to EpisodeRound entities by IDs.
func (eu *EpisodeUpdate) RemoveRoundIDs(ids ...int) *EpisodeUpdate {
	eu.mutation.RemoveRoundIDs(ids...)
	return eu
}

// RemoveRounds removes "rounds" edges to EpisodeRound entities.
func (eu *EpisodeUpdate) RemoveRounds(e ...*EpisodeRound) *EpisodeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveRoundIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EpisodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EpisodeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EpisodeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EpisodeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EpisodeUpdate) check() error {
	if v, ok := eu.mutation.Difficulty(); ok {
		if err := episode.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf(`ent: validator failed for field "Episode.difficulty": %w`, err)}
		}
	}
	return nil
}

func (eu *EpisodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(episode.Table, episode.Columns, sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Aired(); ok {
		_spec.SetField(episode.FieldAired, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Difficulty(); ok {
		_spec.SetField(episode.FieldDifficulty, field.TypeEnum, value)
	}
	if eu.mutation.RoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   episode.RoundsTable,
			Columns: episode.RoundsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episoderound.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedRoundsIDs(); len(nodes) > 0 && !eu.mutation.RoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   episode.RoundsTable,
			Columns: episode.RoundsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episoderound.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   episode.RoundsTable,
			Columns: episode.RoundsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episoderound.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{episode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EpisodeUpdateOne is the builder for updating a single Episode entity.
type EpisodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EpisodeMutation
}

// SetAired sets the "aired" field.
func (euo *EpisodeUpdateOne) SetAired(t time.Time) *EpisodeUpdateOne {
	euo.mutation.SetAired(t)
	return euo
}

// SetNillableAired sets the "aired" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableAired(t *time.Time) *EpisodeUpdateOne {
	if t != nil {
		euo.SetAired(*t)
	}
	return euo
}

// SetDifficulty sets the "difficulty" field.
func (euo *EpisodeUpdateOne) SetDifficulty(e episode.Difficulty) *EpisodeUpdateOne {
	euo.mutation.SetDifficulty(e)
	return euo
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableDifficulty(e *episode.Difficulty) *EpisodeUpdateOne {
	if e != nil {
		euo.SetDifficulty(*e)
	}
	return euo
}

// AddRoundIDs adds the "rounds" edge to the EpisodeRound entity by IDs.
func (euo *EpisodeUpdateOne) AddRoundIDs(ids ...int) *EpisodeUpdateOne {
	euo.mutation.AddRoundIDs(ids...)
	return euo
}

// AddRounds adds the "rounds" edges to the EpisodeRound entity.
func (euo *EpisodeUpdateOne) AddRounds(e ...*EpisodeRound) *EpisodeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddRoundIDs(ids...)
}

// Mutation returns the EpisodeMutation object of the builder.
func (euo *EpisodeUpdateOne) Mutation() *EpisodeMutation {
	return euo.mutation
}

// ClearRounds clears all "rounds" edges to the EpisodeRound entity.
func (euo *EpisodeUpdateOne) ClearRounds() *EpisodeUpdateOne {
	euo.mutation.ClearRounds()
	return euo
}

// RemoveRoundIDs removes the "rounds" edge to EpisodeRound entities by IDs.
func (euo *EpisodeUpdateOne) RemoveRoundIDs(ids ...int) *EpisodeUpdateOne {
	euo.mutation.RemoveRoundIDs(ids...)
	return euo
}

// RemoveRounds removes "rounds" edges to EpisodeRound entities.
func (euo *EpisodeUpdateOne) RemoveRounds(e ...*EpisodeRound) *EpisodeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveRoundIDs(ids...)
}

// Where appends a list predicates to the EpisodeUpdate builder.
func (euo *EpisodeUpdateOne) Where(ps ...predicate.Episode) *EpisodeUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EpisodeUpdateOne) Select(field string, fields ...string) *EpisodeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Episode entity.
func (euo *EpisodeUpdateOne) Save(ctx context.Context) (*Episode, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EpisodeUpdateOne) SaveX(ctx context.Context) *Episode {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EpisodeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EpisodeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EpisodeUpdateOne) check() error {
	if v, ok := euo.mutation.Difficulty(); ok {
		if err := episode.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf(`ent: validator failed for field "Episode.difficulty": %w`, err)}
		}
	}
	return nil
}

func (euo *EpisodeUpdateOne) sqlSave(ctx context.Context) (_node *Episode, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(episode.Table, episode.Columns, sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Episode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, episode.FieldID)
		for _, f := range fields {
			if !episode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != episode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Aired(); ok {
		_spec.SetField(episode.FieldAired, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Difficulty(); ok {
		_spec.SetField(episode.FieldDifficulty, field.TypeEnum, value)
	}
	if euo.mutation.RoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   episode.RoundsTable,
			Columns: episode.RoundsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episoderound.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedRoundsIDs(); len(nodes) > 0 && !euo.mutation.RoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   episode.RoundsTable,
			Columns: episode.RoundsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episoderound.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   episode.RoundsTable,
			Columns: episode.RoundsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episoderound.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Episode{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{episode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
