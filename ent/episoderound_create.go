// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kevindamm/q-party/ent/challengegroup"
	"github.com/kevindamm/q-party/ent/episode"
	"github.com/kevindamm/q-party/ent/episoderound"
)

// EpisodeRoundCreate is the builder for creating a EpisodeRound entity.
type EpisodeRoundCreate struct {
	config
	mutation *EpisodeRoundMutation
	hooks    []Hook
}

// SetRound sets the "round" field.
func (erc *EpisodeRoundCreate) SetRound(e episoderound.Round) *EpisodeRoundCreate {
	erc.mutation.SetRound(e)
	return erc
}

// AddCategoryIDs adds the "categories" edge to the ChallengeGroup entity by IDs.
func (erc *EpisodeRoundCreate) AddCategoryIDs(ids ...int) *EpisodeRoundCreate {
	erc.mutation.AddCategoryIDs(ids...)
	return erc
}

// AddCategories adds the "categories" edges to the ChallengeGroup entity.
func (erc *EpisodeRoundCreate) AddCategories(c ...*ChallengeGroup) *EpisodeRoundCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return erc.AddCategoryIDs(ids...)
}

// AddEpisodeIDs adds the "episode" edge to the Episode entity by IDs.
func (erc *EpisodeRoundCreate) AddEpisodeIDs(ids ...int) *EpisodeRoundCreate {
	erc.mutation.AddEpisodeIDs(ids...)
	return erc
}

// AddEpisode adds the "episode" edges to the Episode entity.
func (erc *EpisodeRoundCreate) AddEpisode(e ...*Episode) *EpisodeRoundCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return erc.AddEpisodeIDs(ids...)
}

// Mutation returns the EpisodeRoundMutation object of the builder.
func (erc *EpisodeRoundCreate) Mutation() *EpisodeRoundMutation {
	return erc.mutation
}

// Save creates the EpisodeRound in the database.
func (erc *EpisodeRoundCreate) Save(ctx context.Context) (*EpisodeRound, error) {
	return withHooks(ctx, erc.sqlSave, erc.mutation, erc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (erc *EpisodeRoundCreate) SaveX(ctx context.Context) *EpisodeRound {
	v, err := erc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (erc *EpisodeRoundCreate) Exec(ctx context.Context) error {
	_, err := erc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (erc *EpisodeRoundCreate) ExecX(ctx context.Context) {
	if err := erc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (erc *EpisodeRoundCreate) check() error {
	if _, ok := erc.mutation.Round(); !ok {
		return &ValidationError{Name: "round", err: errors.New(`ent: missing required field "EpisodeRound.round"`)}
	}
	if v, ok := erc.mutation.Round(); ok {
		if err := episoderound.RoundValidator(v); err != nil {
			return &ValidationError{Name: "round", err: fmt.Errorf(`ent: validator failed for field "EpisodeRound.round": %w`, err)}
		}
	}
	return nil
}

func (erc *EpisodeRoundCreate) sqlSave(ctx context.Context) (*EpisodeRound, error) {
	if err := erc.check(); err != nil {
		return nil, err
	}
	_node, _spec := erc.createSpec()
	if err := sqlgraph.CreateNode(ctx, erc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	erc.mutation.id = &_node.ID
	erc.mutation.done = true
	return _node, nil
}

func (erc *EpisodeRoundCreate) createSpec() (*EpisodeRound, *sqlgraph.CreateSpec) {
	var (
		_node = &EpisodeRound{config: erc.config}
		_spec = sqlgraph.NewCreateSpec(episoderound.Table, sqlgraph.NewFieldSpec(episoderound.FieldID, field.TypeInt))
	)
	if value, ok := erc.mutation.Round(); ok {
		_spec.SetField(episoderound.FieldRound, field.TypeEnum, value)
		_node.Round = value
	}
	if nodes := erc.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   episoderound.CategoriesTable,
			Columns: episoderound.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challengegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := erc.mutation.EpisodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   episoderound.EpisodeTable,
			Columns: episoderound.EpisodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EpisodeRoundCreateBulk is the builder for creating many EpisodeRound entities in bulk.
type EpisodeRoundCreateBulk struct {
	config
	err      error
	builders []*EpisodeRoundCreate
}

// Save creates the EpisodeRound entities in the database.
func (ercb *EpisodeRoundCreateBulk) Save(ctx context.Context) ([]*EpisodeRound, error) {
	if ercb.err != nil {
		return nil, ercb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ercb.builders))
	nodes := make([]*EpisodeRound, len(ercb.builders))
	mutators := make([]Mutator, len(ercb.builders))
	for i := range ercb.builders {
		func(i int, root context.Context) {
			builder := ercb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EpisodeRoundMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ercb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ercb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ercb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ercb *EpisodeRoundCreateBulk) SaveX(ctx context.Context) []*EpisodeRound {
	v, err := ercb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ercb *EpisodeRoundCreateBulk) Exec(ctx context.Context) error {
	_, err := ercb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ercb *EpisodeRoundCreateBulk) ExecX(ctx context.Context) {
	if err := ercb.Exec(ctx); err != nil {
		panic(err)
	}
}
