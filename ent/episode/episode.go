// Code generated by ent, DO NOT EDIT.

package episode

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the episode type in the database.
	Label = "episode"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAired holds the string denoting the aired field in the database.
	FieldAired = "aired"
	// FieldDifficulty holds the string denoting the difficulty field in the database.
	FieldDifficulty = "difficulty"
	// EdgeRounds holds the string denoting the rounds edge name in mutations.
	EdgeRounds = "rounds"
	// Table holds the table name of the episode in the database.
	Table = "episodes"
	// RoundsTable is the table that holds the rounds relation/edge. The primary key declared below.
	RoundsTable = "episode_rounds"
	// RoundsInverseTable is the table name for the EpisodeRound entity.
	// It exists in this package in order to avoid circular dependency with the "episoderound" package.
	RoundsInverseTable = "episode_rounds"
)

// Columns holds all SQL columns for episode fields.
var Columns = []string{
	FieldID,
	FieldAired,
	FieldDifficulty,
}

var (
	// RoundsPrimaryKey and RoundsColumn2 are the table columns denoting the
	// primary key for the rounds relation (M2M).
	RoundsPrimaryKey = []string{"episode_id", "episode_round_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Difficulty defines the type for the "difficulty" enum field.
type Difficulty string

// Difficulty values.
const (
	DifficultyUNKNOWN   Difficulty = "UNKNOWN"
	DifficultyKids      Difficulty = "Kids"
	DifficultyCollege   Difficulty = "College"
	DifficultyStandard  Difficulty = "Standard"
	DifficultyChampions Difficulty = "Champions"
)

func (d Difficulty) String() string {
	return string(d)
}

// DifficultyValidator is a validator for the "difficulty" field enum values. It is called by the builders before save.
func DifficultyValidator(d Difficulty) error {
	switch d {
	case DifficultyUNKNOWN, DifficultyKids, DifficultyCollege, DifficultyStandard, DifficultyChampions:
		return nil
	default:
		return fmt.Errorf("episode: invalid enum value for difficulty field: %q", d)
	}
}

// OrderOption defines the ordering options for the Episode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAired orders the results by the aired field.
func ByAired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAired, opts...).ToFunc()
}

// ByDifficulty orders the results by the difficulty field.
func ByDifficulty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDifficulty, opts...).ToFunc()
}

// ByRoundsCount orders the results by rounds count.
func ByRoundsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoundsStep(), opts...)
	}
}

// ByRounds orders the results by rounds terms.
func ByRounds(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoundsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRoundsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoundsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RoundsTable, RoundsPrimaryKey...),
	)
}
