// Code generated by ent, DO NOT EDIT.

package episoderound

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kevindamm/q-party/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.FieldLTE(FieldID, id))
}

// RoundEQ applies the EQ predicate on the "round" field.
func RoundEQ(v Round) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.FieldEQ(FieldRound, v))
}

// RoundNEQ applies the NEQ predicate on the "round" field.
func RoundNEQ(v Round) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.FieldNEQ(FieldRound, v))
}

// RoundIn applies the In predicate on the "round" field.
func RoundIn(vs ...Round) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.FieldIn(FieldRound, vs...))
}

// RoundNotIn applies the NotIn predicate on the "round" field.
func RoundNotIn(vs ...Round) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.FieldNotIn(FieldRound, vs...))
}

// HasCategories applies the HasEdge predicate on the "categories" edge.
func HasCategories() predicate.EpisodeRound {
	return predicate.EpisodeRound(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CategoriesTable, CategoriesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoriesWith applies the HasEdge predicate on the "categories" edge with a given conditions (other predicates).
func HasCategoriesWith(preds ...predicate.ChallengeGroup) predicate.EpisodeRound {
	return predicate.EpisodeRound(func(s *sql.Selector) {
		step := newCategoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEpisode applies the HasEdge predicate on the "episode" edge.
func HasEpisode() predicate.EpisodeRound {
	return predicate.EpisodeRound(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EpisodeTable, EpisodePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEpisodeWith applies the HasEdge predicate on the "episode" edge with a given conditions (other predicates).
func HasEpisodeWith(preds ...predicate.Episode) predicate.EpisodeRound {
	return predicate.EpisodeRound(func(s *sql.Selector) {
		step := newEpisodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EpisodeRound) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EpisodeRound) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EpisodeRound) predicate.EpisodeRound {
	return predicate.EpisodeRound(sql.NotPredicates(p))
}
