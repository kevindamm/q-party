// Code generated by ent, DO NOT EDIT.

package episoderound

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the episoderound type in the database.
	Label = "episode_round"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRound holds the string denoting the round field in the database.
	FieldRound = "round"
	// EdgeColumns holds the string denoting the columns edge name in mutations.
	EdgeColumns = "columns"
	// EdgeEpisode holds the string denoting the episode edge name in mutations.
	EdgeEpisode = "episode"
	// Table holds the table name of the episoderound in the database.
	Table = "episode_rounds"
	// ColumnsTable is the table that holds the columns relation/edge. The primary key declared below.
	ColumnsTable = "episode_round_columns"
	// ColumnsInverseTable is the table name for the ChallengeGroup entity.
	// It exists in this package in order to avoid circular dependency with the "challengegroup" package.
	ColumnsInverseTable = "challenge_groups"
	// EpisodeTable is the table that holds the episode relation/edge. The primary key declared below.
	EpisodeTable = "episode_rounds"
	// EpisodeInverseTable is the table name for the Episode entity.
	// It exists in this package in order to avoid circular dependency with the "episode" package.
	EpisodeInverseTable = "episodes"
)

// Columns holds all SQL columns for episoderound fields.
var Columns = []string{
	FieldID,
	FieldRound,
}

var (
	// ColumnsPrimaryKey and ColumnsColumn2 are the table columns denoting the
	// primary key for the columns relation (M2M).
	ColumnsPrimaryKey = []string{"episode_round_id", "challenge_group_id"}
	// EpisodePrimaryKey and EpisodeColumn2 are the table columns denoting the
	// primary key for the episode relation (M2M).
	EpisodePrimaryKey = []string{"episode_id", "episode_round_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Round defines the type for the "round" enum field.
type Round string

// Round values.
const (
	RoundUNKNOWN    Round = "UNKNOWN"
	RoundSingle     Round = "Single"
	RoundDouble     Round = "Double"
	RoundFinal      Round = "Final"
	RoundTiebreaker Round = "Tiebreaker"
)

func (r Round) String() string {
	return string(r)
}

// RoundValidator is a validator for the "round" field enum values. It is called by the builders before save.
func RoundValidator(r Round) error {
	switch r {
	case RoundUNKNOWN, RoundSingle, RoundDouble, RoundFinal, RoundTiebreaker:
		return nil
	default:
		return fmt.Errorf("episoderound: invalid enum value for round field: %q", r)
	}
}

// OrderOption defines the ordering options for the EpisodeRound queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRound orders the results by the round field.
func ByRound(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRound, opts...).ToFunc()
}

// ByColumnsCount orders the results by columns count.
func ByColumnsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newColumnsStep(), opts...)
	}
}

// ByColumns orders the results by columns terms.
func ByColumns(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newColumnsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEpisodeCount orders the results by episode count.
func ByEpisodeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEpisodeStep(), opts...)
	}
}

// ByEpisode orders the results by episode terms.
func ByEpisode(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEpisodeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newColumnsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ColumnsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ColumnsTable, ColumnsPrimaryKey...),
	)
}
func newEpisodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EpisodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EpisodeTable, EpisodePrimaryKey...),
	)
}
